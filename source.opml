<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Wed, 18 Dec 2024 16:20:05 GMT -->

<!-- 
   Hi this is Dave Winer. I write all my project code in an outliner, which 
   generates all the files that make up this GitHub project. You'll see a 
   source.opml file like this in each of my projects. It contains the outline 
   source that the repo files were generated from. This is the most logical place 
   to store them. You can read the code in any outliner that supports OPML, which 
   includes https://drummer.land. You can use the Open URL command in 
   Drummer's File menu to open the "raw" version of this file straight from the 
   GitHub repo.
 -->

<opml version="2.0">
	<head>
		<title>nodeEditor: daveGpt</title>
		<dateCreated>Tue, 17 Dec 2024 22:40:16 GMT</dateCreated>
		<dateModified>Wed, 18 Dec 2024 16:20:05 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 2, 7, 8, 11, 15, 32, 33, 35, 37, 38, 45, 50, 63</expansionState>
		<vertScrollState>19</vertScrollState>
		<windowTop>149</windowTop>
		<windowLeft>655</windowLeft>
		<windowBottom>1166</windowBottom>
		<windowRight>1988</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/davegpt/" created="Wed, 11 Dec 2024 23:08:43 GMT">
			<outline text="worknotes.md" created="Mon, 16 Dec 2024 14:32:53 GMT">
				<outline text="#### 12/18/24; 10:02:46 AM by DW" created="Wed, 18 Dec 2024 15:02:46 GMT">
					<outline text="I have the package working for Node. " created="Wed, 18 Dec 2024 15:02:46 GMT"/>
					<outline text="When we want it to work for the browser too, the starting point will be to include commoncode.js in the header portion of their html file, and then start debugging from there. " created="Wed, 18 Dec 2024 15:02:55 GMT"/>
					<outline text="Since the code was derived from code that worked in the browser, the problems should probably just be the difference between code that's in utils.js, but we won't know until we're doing the work, of course. ;-)" created="Wed, 18 Dec 2024 15:22:03 GMT"/>
					</outline>
				<outline text="#### 12/17/24; 5:41:10 PM by DW" created="Tue, 17 Dec 2024 22:41:10 GMT">
					<outline text="Turning it into a node package, and will also provide a browser-based client that uses the same code to communicate. " created="Tue, 17 Dec 2024 22:41:11 GMT"/>
					</outline>
				<outline text="#### 12/17/24; 11:52:09 AM by DW" created="Tue, 17 Dec 2024 16:52:08 GMT">
					<outline text="Added a new option to chatWithChatGpt, the caller can now provide a callback that makes an HTTP request. That way code running on Node can use request and code running on the desktop can use jQuery. Since I developed this on the desktop, the default is jQuery, so you can  leave xxx undefined if you're running on the desktop." created="Tue, 17 Dec 2024 16:52:09 GMT"/>
					</outline>
				<outline text="#### 12/16/24; 9:32:59 AM by DW" created="Mon, 16 Dec 2024 14:32:58 GMT">
					<outline text="I have the outliner set up. When I click the Go button it sends the text of the line I was editing to ChatGPT, and inserts the response as a subhead." created="Mon, 16 Dec 2024 14:33:00 GMT"/>
					<outline text="It's really sending back lines of text, delimited by \n\n between lines. I have to parse this and generate a list of subs." created="Mon, 16 Dec 2024 14:33:35 GMT"/>
					<outline text="But ChatGPT is too slow now to get any work done. Will try this at night when things are running faster?" created="Mon, 16 Dec 2024 14:34:01 GMT"/>
					<outline text="But it looks promising. " created="Mon, 16 Dec 2024 14:34:17 GMT"/>
					</outline>
				</outline>
			<outline text="gptnotes.md" created="Wed, 18 Dec 2024 16:11:36 GMT">
				<outline text="#### 12/18/24; 11:11:43 AM by DW" created="Wed, 18 Dec 2024 16:11:41 GMT">
					<outline text="This Node.js project interfaces with OpenAI's GPT API, offering both Node.js and browser-based communication options. Key features and observations about the setup include:"/>
					<outline text=""/>
					<outline text="1. **Node.js and Browser Support**:">
						<outline text="- The project uses `davegpt.js` to communicate with OpenAI APIs."/>
						<outline text="- Separate implementations (`nodeHttpRequest` and `browserHttpRequest`) handle requests in Node.js and browser environments respectively, depending on the runtime environment."/>
						</outline>
					<outline text=""/>
					<outline text="2. **Custom Configuration**:">
						<outline text="- A `config.json` file is used for API keys and sample message texts. It stores critical data like the `chatGptApiKey` and sample prompts for testing."/>
						</outline>
					<outline text=""/>
					<outline text="3. **Dependencies**:">
						<outline text="- Relies on the `request` package for HTTP requests in Node.js, and includes `daveutils` for utility operations."/>
						</outline>
					<outline text=""/>
					<outline text="4. **Project Scope**:">
						<outline text="- The package aims to work in Node.js initially, with plans for browser integration. Debugging browser-specific code will involve integrating a `commoncode.js` file."/>
						</outline>
					<outline text=""/>
					<outline text="5. **Chat API Interface**:">
						<outline text="- The `chatWithChatGpt` class provides an interface for sending messages to OpenAI's GPT models."/>
						<outline text="- Uses an initialization step to set system prompts and store message history."/>
						<outline text="- Supports custom callbacks to make HTTP requests, simplifying integration across environments."/>
						</outline>
					<outline text=""/>
					<outline text="6. **Simplified Example**:">
						<outline text="- A test application (`test.js`) demonstrates basic usage by sending a message and logging the response."/>
						</outline>
					<outline text=""/>
					<outline text="7. **Design Philosophy**:">
						<outline text="- Modular and reusable, supporting future extensions and testing."/>
						</outline>
					<outline text=""/>
					<outline text="If you'd like, I can help with debugging, browser compatibility, or adding new features!"/>
					</outline>
				</outline>
			<outline text="package.json" created="Tue, 17 Dec 2024 22:41:55 GMT">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;davegpt&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Node and browser-based JavaScript code that communicates with OpenAI.&quot;," created="Fri, 02 Jul 2021 14:57:59 GMT"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;repository&quot;: {">
						<outline text="&quot;type&quot;: &quot;git&quot;,"/>
						<outline text="&quot;url&quot;: &quot;https://github.com/scripting/davegpt.git&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;files&quot;: [">
						<outline text="&quot;davegpt.js&quot;"/>
						<outline text="],"/>
						</outline>
					<outline text="&quot;main&quot;: &quot;davegpt.js&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="commoncode.js" created="Wed, 18 Dec 2024 15:03:25 GMT">
				<outline text="function httpRequest (url, method, timeout, headers, data, callback) { " created="Tue, 17 Dec 2024 22:54:39 GMT">
					<outline text="var myHttpRequest;" created="Tue, 17 Dec 2024 23:00:41 GMT"/>
					<outline text="function isNodeEnvironment () {">
						<outline text="if ((typeof process !== &quot;undefined&quot;) &amp;&amp; (typeof process.versions !== &quot;undefined&quot;) &amp;&amp; (typeof process.versions.node !== &quot;undefined&quot;)) {" created="Tue, 17 Dec 2024 22:57:30 GMT">
							<outline text="return (true); //running in Node" created="Tue, 17 Dec 2024 22:58:20 GMT"/>
							<outline text="}" created="Tue, 17 Dec 2024 22:58:04 GMT"/>
							</outline>
						<outline text="else {" created="Tue, 17 Dec 2024 22:58:30 GMT">
							<outline text="return (false); //running in the browser" created="Tue, 17 Dec 2024 22:58:32 GMT"/>
							<outline text="}" created="Tue, 17 Dec 2024 23:33:17 GMT"/>
							</outline>
						<outline text="}" created="Tue, 17 Dec 2024 22:58:41 GMT"/>
						</outline>
					<outline text="function nodeHttpRequest (url, method, timeout, headers, data, callback) {">
						<outline text="Changes" isComment="true" created="Wed, 18 Dec 2024 14:52:30 GMT">
							<outline text="12/18/24; 9:52:32 AM by DW" created="Wed, 18 Dec 2024 14:52:31 GMT">
								<outline text="The data param should be an object, not a jsonified object. The conversion will automatically take place because we've set json: true in theRequest object." created="Wed, 18 Dec 2024 14:52:32 GMT"/>
								</outline>
							</outline>
						<outline text="timeout = (timeout === undefined) ? 30000 : timeout;"/>
						<outline text="headers = (headers === undefined) ? new Object () : headers;" created="Wed, 18 Dec 2024 14:23:20 GMT"/>
						<outline text="" created="Wed, 18 Dec 2024 14:23:20 GMT"/>
						<outline text="const theRequest = {">
							<outline text="url,"/>
							<outline text="method,"/>
							<outline text="timeout,"/>
							<outline text="headers,"/>
							<outline text="body: (method.toLowerCase () == &quot;post&quot;) ? data : undefined," created="Fri, 13 Dec 2024 17:40:38 GMT"/>
							<outline text="json: true"/>
							<outline text="};"/>
							</outline>
						<outline text="" created="Tue, 17 Dec 2024 23:22:08 GMT"/>
						<outline text="request (theRequest, function (err, response, body) {">
							<outline text="if (err) {">
								<outline text="callback (err);"/>
								<outline text="}" created="Tue, 17 Dec 2024 23:12:56 GMT"/>
								</outline>
							<outline text="else {">
								<outline text="if (response.statusCode &gt;= 200 &amp;&amp; response.statusCode &lt;= 299) {">
									<outline text="if (body.error === undefined) {" created="Wed, 18 Dec 2024 14:52:09 GMT">
										<outline text="callback (undefined, body); //body is already parsed as JSON due to json: true in theRequest"/>
										<outline text="}" created="Wed, 18 Dec 2024 14:53:45 GMT"/>
										</outline>
									<outline text="else {" created="Wed, 18 Dec 2024 14:53:45 GMT">
										<outline text="callback (body.error);" created="Wed, 18 Dec 2024 14:54:09 GMT"/>
										<outline text="}" created="Wed, 18 Dec 2024 14:53:48 GMT"/>
										</outline>
									<outline text="} "/>
									</outline>
								<outline text="else {" created="Tue, 17 Dec 2024 23:13:31 GMT">
									<outline text="var theError;" created="Wed, 18 Dec 2024 15:01:07 GMT"/>
									<outline text="try {" created="Wed, 18 Dec 2024 14:57:44 GMT">
										<outline text="theError = body.error; //a strange quirk of OpenAI" created="Wed, 18 Dec 2024 14:58:42 GMT"/>
										<outline text="}" created="Wed, 18 Dec 2024 14:58:16 GMT"/>
										</outline>
									<outline text="catch (err) {" created="Wed, 18 Dec 2024 14:58:17 GMT">
										<outline text="const message = &quot;Couldn't make the HTTP request because there was an error == &quot; + response.statusCode + &quot;.&quot;;"/>
										<outline text="theError = {message};"/>
										<outline text="}" created="Wed, 18 Dec 2024 14:58:20 GMT"/>
										</outline>
									<outline text="callback (theError);" created="Wed, 18 Dec 2024 15:01:48 GMT"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function browserHttpRequest (url, method, timeout, headers, data, callback) { ">
						<outline text="Changes" isComment="true">
							<outline text="7/22/22; 12:30:36 PM by DW" created="Fri, 22 Jul 2022 16:30:36 GMT">
								<outline text="If there's no message, say there was a communication error. We have to say something. ;-)" created="Fri, 22 Jul 2022 16:30:37 GMT"/>
								</outline>
							<outline text="9/18/21; 10:47:11 AM by DW" created="Sat, 18 Sep 2021 14:47:10 GMT">
								<outline text="When there's an error, usually there is a status.responseText to parse as JSON, but sometimes it fails. Now we account for that. " created="Sat, 18 Sep 2021 14:47:11 GMT"/>
								</outline>
							<outline text="7/20/20; 5:36:14 PM by DW">
								<outline text="Finally, I need a HTTP request routine that calls back in a standard way.">
									<outline text="function (err, data)"/>
									</outline>
								<outline text="No, I don't want to use promises."/>
								<outline text="for info about timeous see this page." isComment="true">
									<outline text="http://stackoverflow.com/questions/3543683/determine-if-ajax-error-is-a-timeout"/>
									</outline>
								</outline>
							</outline>
						<outline text="timeout = (timeout === undefined) ? 30000 : timeout;"/>
						<outline text="var jxhr = $.ajax ({ ">
							<outline text="url,"/>
							<outline text="method," created="Fri, 13 Dec 2024 17:40:11 GMT"/>
							<outline text="headers," created="Tue, 14 May 2013 14:35:06 GMT" pgfnum="23850"/>
							<outline text="timeout,"/>
							<outline text="data: (method.toLowerCase () == &quot;post&quot;) ? JSON.stringify (data) : undefined" created="Fri, 13 Dec 2024 17:40:38 GMT"/>
							<outline text="}) "/>
							</outline>
						<outline text=".success (function (data, status) { ">
							<outline text="callback (undefined, data);"/>
							<outline text="}) "/>
							</outline>
						<outline text=".error (function (status) { ">
							<outline text="var message;" created="Sat, 18 Sep 2021 14:45:42 GMT"/>
							<outline text="try { //9/18/21 by DW" created="Sat, 18 Sep 2021 14:45:52 GMT">
								<outline text="message = JSON.parse (status.responseText).message;" created="Sat, 18 Sep 2021 14:46:09 GMT"/>
								<outline text="}" created="Sat, 18 Sep 2021 14:45:55 GMT"/>
								</outline>
							<outline text="catch (err) {" created="Sat, 18 Sep 2021 14:45:57 GMT">
								<outline text="message = status.responseText;" created="Sat, 18 Sep 2021 14:46:25 GMT"/>
								<outline text="}" created="Sat, 18 Sep 2021 14:46:00 GMT"/>
								</outline>
							<outline text="if ((message === undefined) || (message.length == 0)) { //7/22/22 by DW &amp; 8/31/22 by DW" created="Fri, 22 Jul 2022 16:29:46 GMT">
								<outline text="message = &quot;There was an error communicating with the server.&quot;;" created="Fri, 22 Jul 2022 16:30:07 GMT"/>
								<outline text="}" created="Fri, 22 Jul 2022 16:29:57 GMT"/>
								</outline>
							<outline text="var err = {">
								<outline text="code: status.status,"/>
								<outline text="message"/>
								<outline text="};"/>
								</outline>
							<outline text="callback (err);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="if (isNodeEnvironment ()) {" created="Tue, 17 Dec 2024 22:55:59 GMT">
						<outline text="myHttpRequest = nodeHttpRequest;" created="Tue, 17 Dec 2024 22:59:17 GMT"/>
						<outline text="}" created="Tue, 17 Dec 2024 22:59:02 GMT"/>
						</outline>
					<outline text="else {" created="Tue, 17 Dec 2024 22:59:03 GMT">
						<outline text="myHttpRequest = browserHttpRequest;" created="Tue, 17 Dec 2024 22:59:17 GMT"/>
						<outline text="}" created="Tue, 17 Dec 2024 22:59:05 GMT"/>
						</outline>
					<outline text="return (myHttpRequest (url, method, timeout, headers, data, callback));" created="Tue, 17 Dec 2024 22:55:34 GMT"/>
					<outline text="}" created="Tue, 17 Dec 2024 22:55:30 GMT"/>
					</outline>
				<outline text="function chatWithChatGpt (userOptions) {" created="Fri, 13 Dec 2024 22:40:02 GMT">
					<outline text="const options = {" created="Fri, 13 Dec 2024 22:40:20 GMT">
						<outline text="userPrompt: &quot;Greetings!&quot;," created="Fri, 13 Dec 2024 22:40:42 GMT"/>
						<outline text="apiUrl: &quot;https://api.openai.com/v1/chat/completions&quot;," created="Fri, 13 Dec 2024 22:40:51 GMT"/>
						<outline text="apiKey: undefined," created="Fri, 13 Dec 2024 22:41:17 GMT"/>
						<outline text="systemRole: &quot;You are a helpful assistant.&quot;," created="Sun, 15 Dec 2024 14:14:30 GMT"/>
						<outline text="httpRequestCallback: httpRequest //12/17/24 by DW" created="Tue, 17 Dec 2024 16:53:38 GMT"/>
						<outline text="};" created="Fri, 13 Dec 2024 22:40:29 GMT"/>
						</outline>
					<outline text="utils.mergeOptions (userOptions, options);" created="Fri, 13 Dec 2024 22:51:54 GMT"/>
					<outline text="" created="Fri, 13 Dec 2024 22:48:31 GMT"/>
					<outline text="var messages, conversation;" created="Mon, 16 Dec 2024 20:55:56 GMT"/>
					<outline text="" created="Mon, 16 Dec 2024 20:56:03 GMT"/>
					<outline text="function init () {" created="Mon, 16 Dec 2024 20:55:10 GMT">
						<outline text="messages = [">
							<outline text="{role: &quot;system&quot;, content: options.systemRole}"/>
							<outline text="];"/>
							</outline>
						<outline text="conversation = [" created="Fri, 13 Dec 2024 23:00:37 GMT">
							<outline text="];" created="Fri, 13 Dec 2024 23:00:55 GMT"/>
							</outline>
						<outline text="}" created="Mon, 16 Dec 2024 20:55:14 GMT"/>
						</outline>
					<outline text="" created="Mon, 16 Dec 2024 20:55:43 GMT"/>
					<outline text="function httpRequest (url, method, timeout, headers, data, callback) { " isComment="true">
						<outline text="Changes" isComment="true">
							<outline text="7/22/22; 12:30:36 PM by DW" created="Fri, 22 Jul 2022 16:30:36 GMT">
								<outline text="If there's no message, say there was a communication error. We have to say something. ;-)" created="Fri, 22 Jul 2022 16:30:37 GMT"/>
								</outline>
							<outline text="9/18/21; 10:47:11 AM by DW" created="Sat, 18 Sep 2021 14:47:10 GMT">
								<outline text="When there's an error, usually there is a status.responseText to parse as JSON, but sometimes it fails. Now we account for that. " created="Sat, 18 Sep 2021 14:47:11 GMT"/>
								</outline>
							<outline text="7/20/20; 5:36:14 PM by DW">
								<outline text="Finally, I need a HTTP request routine that calls back in a standard way.">
									<outline text="function (err, data)"/>
									</outline>
								<outline text="No, I don't want to use promises."/>
								<outline text="for info about timeous see this page." isComment="true">
									<outline text="http://stackoverflow.com/questions/3543683/determine-if-ajax-error-is-a-timeout"/>
									</outline>
								</outline>
							</outline>
						<outline text="timeout = (timeout === undefined) ? 30000 : timeout;"/>
						<outline text="var jxhr = $.ajax ({ ">
							<outline text="url,"/>
							<outline text="method," created="Fri, 13 Dec 2024 17:40:11 GMT"/>
							<outline text="headers," created="Tue, 14 May 2013 14:35:06 GMT" pgfnum="23850"/>
							<outline text="timeout,"/>
							<outline text="data" created="Fri, 13 Dec 2024 17:40:38 GMT"/>
							<outline text="}) "/>
							</outline>
						<outline text=".success (function (data, status) { ">
							<outline text="callback (undefined, data);"/>
							<outline text="}) "/>
							</outline>
						<outline text=".error (function (status) { ">
							<outline text="var message;" created="Sat, 18 Sep 2021 14:45:42 GMT"/>
							<outline text="try { //9/18/21 by DW" created="Sat, 18 Sep 2021 14:45:52 GMT">
								<outline text="message = JSON.parse (status.responseText).message;" created="Sat, 18 Sep 2021 14:46:09 GMT"/>
								<outline text="}" created="Sat, 18 Sep 2021 14:45:55 GMT"/>
								</outline>
							<outline text="catch (err) {" created="Sat, 18 Sep 2021 14:45:57 GMT">
								<outline text="message = status.responseText;" created="Sat, 18 Sep 2021 14:46:25 GMT"/>
								<outline text="}" created="Sat, 18 Sep 2021 14:46:00 GMT"/>
								</outline>
							<outline text="if ((message === undefined) || (message.length == 0)) { //7/22/22 by DW &amp; 8/31/22 by DW" created="Fri, 22 Jul 2022 16:29:46 GMT">
								<outline text="message = &quot;There was an error communicating with the server.&quot;;" created="Fri, 22 Jul 2022 16:30:07 GMT"/>
								<outline text="}" created="Fri, 22 Jul 2022 16:29:57 GMT"/>
								</outline>
							<outline text="var err = {">
								<outline text="code: status.status,"/>
								<outline text="message"/>
								<outline text="};"/>
								</outline>
							<outline text="callback (err);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="" created="Fri, 13 Dec 2024 22:48:04 GMT"/>
					<outline text="function sendMessage (theMessage, callback) {" created="Fri, 13 Dec 2024 17:15:36 GMT">
						<outline text="const newMessage = {role: &quot;user&quot;, content: theMessage};" created="Fri, 13 Dec 2024 23:01:25 GMT"/>
						<outline text="messages.push (newMessage);" created="Fri, 13 Dec 2024 22:48:52 GMT"/>
						<outline text="conversation.push (newMessage);" created="Fri, 13 Dec 2024 23:01:56 GMT"/>
						<outline text=""/>
						<outline text="const timeout = undefined; //accept the default" created="Fri, 13 Dec 2024 22:49:55 GMT"/>
						<outline text="const headers = {">
							<outline text="&quot;Content-Type&quot;: &quot;application/json&quot;,"/>
							<outline text="&quot;Authorization&quot;: `Bearer ${options.apiKey}`"/>
							<outline text="};"/>
							</outline>
						<outline text="const bodyStruct = {" created="Fri, 13 Dec 2024 17:20:56 GMT">
							<outline text="model: &quot;gpt-4&quot;,"/>
							<outline text="messages: messages"/>
							<outline text="};" created="Fri, 13 Dec 2024 17:21:05 GMT"/>
							</outline>
						<outline text="" created="Fri, 13 Dec 2024 17:16:31 GMT"/>
						<outline text="console.log (&quot;sendMessage: messages == &quot; + utils.jsonStringify (messages));" created="Mon, 16 Dec 2024 20:56:35 GMT"/>
						<outline text="options.httpRequestCallback (options.apiUrl, &quot;POST&quot;, timeout, headers, bodyStruct, function (err, dataFromChatGpt) {">
							<outline text="if (err) {" created="Fri, 13 Dec 2024 17:41:24 GMT">
								<outline text="console.log (err.message);" created="Fri, 13 Dec 2024 17:41:27 GMT"/>
								<outline text="if (callback !== undefined) {" created="Fri, 13 Dec 2024 22:54:14 GMT">
									<outline text="callback (err);" created="Fri, 13 Dec 2024 22:54:25 GMT"/>
									<outline text="}" created="Fri, 13 Dec 2024 22:54:24 GMT"/>
									</outline>
								<outline text="}" created="Fri, 13 Dec 2024 17:41:33 GMT"/>
								</outline>
							<outline text="else {" created="Fri, 13 Dec 2024 17:41:34 GMT">
								<outline text="const responseMessage = dataFromChatGpt.choices [0].message;" created="Fri, 13 Dec 2024 23:03:26 GMT"/>
								<outline text="console.log (&quot;sendMessage: responseMessage.content == &quot; + utils.jsonStringify (responseMessage.content));" created="Fri, 13 Dec 2024 17:41:27 GMT"/>
								<outline text="conversation.push (responseMessage.content);" created="Fri, 13 Dec 2024 23:01:56 GMT"/>
								<outline text="if (callback !== undefined) {" created="Fri, 13 Dec 2024 22:54:14 GMT">
									<outline text="callback (err, utils.jsonStringify (responseMessage.content));" created="Fri, 13 Dec 2024 22:54:25 GMT"/>
									<outline text="}" created="Fri, 13 Dec 2024 22:54:24 GMT"/>
									</outline>
								<outline text="}" created="Fri, 13 Dec 2024 17:41:35 GMT"/>
								</outline>
							<outline text="});" created="Fri, 13 Dec 2024 17:23:00 GMT"/>
							</outline>
						<outline text="}" created="Fri, 13 Dec 2024 17:16:29 GMT"/>
						</outline>
					<outline text="function getConversation () {" created="Fri, 13 Dec 2024 23:04:48 GMT">
						<outline text="return (conversation);" created="Fri, 13 Dec 2024 23:05:08 GMT"/>
						<outline text="}" created="Fri, 13 Dec 2024 23:04:53 GMT"/>
						</outline>
					<outline text="" created="Fri, 13 Dec 2024 22:40:20 GMT"/>
					<outline text="init ();" created="Fri, 13 Dec 2024 22:40:20 GMT"/>
					<outline text="this.sendMessage = sendMessage;" created="Fri, 13 Dec 2024 22:46:21 GMT"/>
					<outline text="this.getConversation = getConversation;" created="Fri, 13 Dec 2024 22:46:21 GMT"/>
					<outline text="this.init = init;" created="Fri, 13 Dec 2024 22:46:21 GMT"/>
					<outline text="}" created="Fri, 13 Dec 2024 22:40:18 GMT"/>
					</outline>
				</outline>
			<outline text="davegpt.js" created="Tue, 17 Dec 2024 22:41:55 GMT">
				<outline text="const myVersion = &quot;0.4.0&quot;, myProductName = &quot;davegpt&quot;; " created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text="" created="Tue, 17 Dec 2024 22:45:04 GMT"/>
				<outline text="exports.chatWithChatGpt = chatWithChatGpt;"/>
				<outline text="" created="Tue, 17 Dec 2024 22:46:00 GMT"/>
				<outline text="const utils = require (&quot;daveutils&quot;);" created="Sat, 20 Feb 2021 22:03:12 GMT"/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text="" created="Wed, 18 Dec 2024 15:04:37 GMT"/>
				<outline text="" created="Wed, 18 Dec 2024 15:19:10 GMT"/>
				<outline text="//below, i've included the code from commoncode.js here -- 12/18/24 by DW" created="Wed, 18 Dec 2024 15:19:10 GMT"/>
				<outline text="" created="Wed, 18 Dec 2024 15:19:10 GMT"/>
				<outline text="[[http://scripting.com/code/davegpt/commoncode.js]]" created="Wed, 18 Dec 2024 15:04:38 GMT"/>
				<outline text="" created="Wed, 18 Dec 2024 15:19:11 GMT"/>
				<outline text="" created="Wed, 18 Dec 2024 15:05:16 GMT"/>
				<outline text="function httpRequest (url, method, timeout, headers, data, callback) { " isComment="true" created="Tue, 17 Dec 2024 22:54:39 GMT">
					<outline text="var myHttpRequest;" created="Tue, 17 Dec 2024 23:00:41 GMT"/>
					<outline text="function isNodeEnvironment () {">
						<outline text="if ((typeof process !== &quot;undefined&quot;) &amp;&amp; (typeof process.versions !== &quot;undefined&quot;) &amp;&amp; (typeof process.versions.node !== &quot;undefined&quot;)) {" created="Tue, 17 Dec 2024 22:57:30 GMT">
							<outline text="return (true); //running in Node" created="Tue, 17 Dec 2024 22:58:20 GMT"/>
							<outline text="}" created="Tue, 17 Dec 2024 22:58:04 GMT"/>
							</outline>
						<outline text="else {" created="Tue, 17 Dec 2024 22:58:30 GMT">
							<outline text="return (false); //running in the browser" created="Tue, 17 Dec 2024 22:58:32 GMT"/>
							<outline text="}" created="Tue, 17 Dec 2024 23:33:17 GMT"/>
							</outline>
						<outline text="}" created="Tue, 17 Dec 2024 22:58:41 GMT"/>
						</outline>
					<outline text="function nodeHttpRequest (url, method, timeout, headers, data, callback) {">
						<outline text="Changes" isComment="true" created="Wed, 18 Dec 2024 14:52:30 GMT">
							<outline text="12/18/24; 9:52:32 AM by DW" created="Wed, 18 Dec 2024 14:52:31 GMT">
								<outline text="The data param should be an object, not a jsonified object. The conversion will automatically take place because we've set json: true in theRequest object." created="Wed, 18 Dec 2024 14:52:32 GMT"/>
								</outline>
							</outline>
						<outline text="timeout = (timeout === undefined) ? 30000 : timeout;"/>
						<outline text="headers = (headers === undefined) ? new Object () : headers;" created="Wed, 18 Dec 2024 14:23:20 GMT"/>
						<outline text="" created="Wed, 18 Dec 2024 14:50:39 GMT"/>
						<outline text="data = JSON.stringify (data); //provoke an error -- 12/18/24 by DW" created="Wed, 18 Dec 2024 14:50:39 GMT"/>
						<outline text="" created="Wed, 18 Dec 2024 14:23:20 GMT"/>
						<outline text="const theRequest = {">
							<outline text="url,"/>
							<outline text="method,"/>
							<outline text="timeout,"/>
							<outline text="headers,"/>
							<outline text="body: (method.toLowerCase () == &quot;post&quot;) ? data : undefined," created="Fri, 13 Dec 2024 17:40:38 GMT"/>
							<outline text="json: true"/>
							<outline text="};"/>
							</outline>
						<outline text="" created="Tue, 17 Dec 2024 23:22:08 GMT"/>
						<outline text="request (theRequest, function (err, response, body) {">
							<outline text="if (err) {">
								<outline text="callback (err);"/>
								<outline text="}" created="Tue, 17 Dec 2024 23:12:56 GMT"/>
								</outline>
							<outline text="else {">
								<outline text="if (response.statusCode &gt;= 200 &amp;&amp; response.statusCode &lt;= 299) {">
									<outline text="if (body.error === undefined) {" created="Wed, 18 Dec 2024 14:52:09 GMT">
										<outline text="callback (undefined, body); //body is already parsed as JSON due to json: true in theRequest"/>
										<outline text="}" created="Wed, 18 Dec 2024 14:53:45 GMT"/>
										</outline>
									<outline text="else {" created="Wed, 18 Dec 2024 14:53:45 GMT">
										<outline text="callback (body.error);" created="Wed, 18 Dec 2024 14:54:09 GMT"/>
										<outline text="}" created="Wed, 18 Dec 2024 14:53:48 GMT"/>
										</outline>
									<outline text="} "/>
									</outline>
								<outline text="else {" created="Tue, 17 Dec 2024 23:13:31 GMT">
									<outline text="var theError;" created="Wed, 18 Dec 2024 15:01:07 GMT"/>
									<outline text="try {" created="Wed, 18 Dec 2024 14:57:44 GMT">
										<outline text="theError = body.error; //a strange quirk of OpenAI" created="Wed, 18 Dec 2024 14:58:42 GMT"/>
										<outline text="}" created="Wed, 18 Dec 2024 14:58:16 GMT"/>
										</outline>
									<outline text="catch (err) {" created="Wed, 18 Dec 2024 14:58:17 GMT">
										<outline text="const message = &quot;Couldn't make the HTTP request because there was an error == &quot; + response.statusCode + &quot;.&quot;;"/>
										<outline text="theError = {message};"/>
										<outline text="}" created="Wed, 18 Dec 2024 14:58:20 GMT"/>
										</outline>
									<outline text="callback (theError);" created="Wed, 18 Dec 2024 15:01:48 GMT"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function browserHttpRequest (url, method, timeout, headers, data, callback) { ">
						<outline text="Changes" isComment="true">
							<outline text="7/22/22; 12:30:36 PM by DW" created="Fri, 22 Jul 2022 16:30:36 GMT">
								<outline text="If there's no message, say there was a communication error. We have to say something. ;-)" created="Fri, 22 Jul 2022 16:30:37 GMT"/>
								</outline>
							<outline text="9/18/21; 10:47:11 AM by DW" created="Sat, 18 Sep 2021 14:47:10 GMT">
								<outline text="When there's an error, usually there is a status.responseText to parse as JSON, but sometimes it fails. Now we account for that. " created="Sat, 18 Sep 2021 14:47:11 GMT"/>
								</outline>
							<outline text="7/20/20; 5:36:14 PM by DW">
								<outline text="Finally, I need a HTTP request routine that calls back in a standard way.">
									<outline text="function (err, data)"/>
									</outline>
								<outline text="No, I don't want to use promises."/>
								<outline text="for info about timeous see this page." isComment="true">
									<outline text="http://stackoverflow.com/questions/3543683/determine-if-ajax-error-is-a-timeout"/>
									</outline>
								</outline>
							</outline>
						<outline text="timeout = (timeout === undefined) ? 30000 : timeout;"/>
						<outline text="var jxhr = $.ajax ({ ">
							<outline text="url,"/>
							<outline text="method," created="Fri, 13 Dec 2024 17:40:11 GMT"/>
							<outline text="headers," created="Tue, 14 May 2013 14:35:06 GMT" pgfnum="23850"/>
							<outline text="timeout,"/>
							<outline text="data: (method.toLowerCase () == &quot;post&quot;) ? JSON.stringify (data) : undefined" created="Fri, 13 Dec 2024 17:40:38 GMT"/>
							<outline text="}) "/>
							</outline>
						<outline text=".success (function (data, status) { ">
							<outline text="callback (undefined, data);"/>
							<outline text="}) "/>
							</outline>
						<outline text=".error (function (status) { ">
							<outline text="var message;" created="Sat, 18 Sep 2021 14:45:42 GMT"/>
							<outline text="try { //9/18/21 by DW" created="Sat, 18 Sep 2021 14:45:52 GMT">
								<outline text="message = JSON.parse (status.responseText).message;" created="Sat, 18 Sep 2021 14:46:09 GMT"/>
								<outline text="}" created="Sat, 18 Sep 2021 14:45:55 GMT"/>
								</outline>
							<outline text="catch (err) {" created="Sat, 18 Sep 2021 14:45:57 GMT">
								<outline text="message = status.responseText;" created="Sat, 18 Sep 2021 14:46:25 GMT"/>
								<outline text="}" created="Sat, 18 Sep 2021 14:46:00 GMT"/>
								</outline>
							<outline text="if ((message === undefined) || (message.length == 0)) { //7/22/22 by DW &amp; 8/31/22 by DW" created="Fri, 22 Jul 2022 16:29:46 GMT">
								<outline text="message = &quot;There was an error communicating with the server.&quot;;" created="Fri, 22 Jul 2022 16:30:07 GMT"/>
								<outline text="}" created="Fri, 22 Jul 2022 16:29:57 GMT"/>
								</outline>
							<outline text="var err = {">
								<outline text="code: status.status,"/>
								<outline text="message"/>
								<outline text="};"/>
								</outline>
							<outline text="callback (err);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="if (isNodeEnvironment ()) {" created="Tue, 17 Dec 2024 22:55:59 GMT">
						<outline text="myHttpRequest = nodeHttpRequest;" created="Tue, 17 Dec 2024 22:59:17 GMT"/>
						<outline text="}" created="Tue, 17 Dec 2024 22:59:02 GMT"/>
						</outline>
					<outline text="else {" created="Tue, 17 Dec 2024 22:59:03 GMT">
						<outline text="myHttpRequest = browserHttpRequest;" created="Tue, 17 Dec 2024 22:59:17 GMT"/>
						<outline text="}" created="Tue, 17 Dec 2024 22:59:05 GMT"/>
						</outline>
					<outline text="return (myHttpRequest (url, method, timeout, headers, data, callback));" created="Tue, 17 Dec 2024 22:55:34 GMT"/>
					<outline text="}" created="Tue, 17 Dec 2024 22:55:30 GMT"/>
					</outline>
				<outline text="function chatWithChatGpt (userOptions) {" isComment="true" created="Fri, 13 Dec 2024 22:40:02 GMT">
					<outline text="const options = {" created="Fri, 13 Dec 2024 22:40:20 GMT">
						<outline text="userPrompt: &quot;Greetings!&quot;," created="Fri, 13 Dec 2024 22:40:42 GMT"/>
						<outline text="apiUrl: &quot;https://api.openai.com/v1/chat/completions&quot;," created="Fri, 13 Dec 2024 22:40:51 GMT"/>
						<outline text="apiKey: undefined," created="Fri, 13 Dec 2024 22:41:17 GMT"/>
						<outline text="systemRole: &quot;You are a helpful assistant.&quot;," created="Sun, 15 Dec 2024 14:14:30 GMT"/>
						<outline text="httpRequestCallback: httpRequest //12/17/24 by DW" created="Tue, 17 Dec 2024 16:53:38 GMT"/>
						<outline text="};" created="Fri, 13 Dec 2024 22:40:29 GMT"/>
						</outline>
					<outline text="utils.mergeOptions (userOptions, options);" created="Fri, 13 Dec 2024 22:51:54 GMT"/>
					<outline text="" created="Fri, 13 Dec 2024 22:48:31 GMT"/>
					<outline text="var messages, conversation;" created="Mon, 16 Dec 2024 20:55:56 GMT"/>
					<outline text="" created="Mon, 16 Dec 2024 20:56:03 GMT"/>
					<outline text="function init () {" created="Mon, 16 Dec 2024 20:55:10 GMT">
						<outline text="messages = [">
							<outline text="{role: &quot;system&quot;, content: options.systemRole}"/>
							<outline text="];"/>
							</outline>
						<outline text="conversation = [" created="Fri, 13 Dec 2024 23:00:37 GMT">
							<outline text="];" created="Fri, 13 Dec 2024 23:00:55 GMT"/>
							</outline>
						<outline text="}" created="Mon, 16 Dec 2024 20:55:14 GMT"/>
						</outline>
					<outline text="" created="Mon, 16 Dec 2024 20:55:43 GMT"/>
					<outline text="function httpRequest (url, method, timeout, headers, data, callback) { " isComment="true">
						<outline text="Changes" isComment="true">
							<outline text="7/22/22; 12:30:36 PM by DW" created="Fri, 22 Jul 2022 16:30:36 GMT">
								<outline text="If there's no message, say there was a communication error. We have to say something. ;-)" created="Fri, 22 Jul 2022 16:30:37 GMT"/>
								</outline>
							<outline text="9/18/21; 10:47:11 AM by DW" created="Sat, 18 Sep 2021 14:47:10 GMT">
								<outline text="When there's an error, usually there is a status.responseText to parse as JSON, but sometimes it fails. Now we account for that. " created="Sat, 18 Sep 2021 14:47:11 GMT"/>
								</outline>
							<outline text="7/20/20; 5:36:14 PM by DW">
								<outline text="Finally, I need a HTTP request routine that calls back in a standard way.">
									<outline text="function (err, data)"/>
									</outline>
								<outline text="No, I don't want to use promises."/>
								<outline text="for info about timeous see this page." isComment="true">
									<outline text="http://stackoverflow.com/questions/3543683/determine-if-ajax-error-is-a-timeout"/>
									</outline>
								</outline>
							</outline>
						<outline text="timeout = (timeout === undefined) ? 30000 : timeout;"/>
						<outline text="var jxhr = $.ajax ({ ">
							<outline text="url,"/>
							<outline text="method," created="Fri, 13 Dec 2024 17:40:11 GMT"/>
							<outline text="headers," created="Tue, 14 May 2013 14:35:06 GMT" pgfnum="23850"/>
							<outline text="timeout,"/>
							<outline text="data" created="Fri, 13 Dec 2024 17:40:38 GMT"/>
							<outline text="}) "/>
							</outline>
						<outline text=".success (function (data, status) { ">
							<outline text="callback (undefined, data);"/>
							<outline text="}) "/>
							</outline>
						<outline text=".error (function (status) { ">
							<outline text="var message;" created="Sat, 18 Sep 2021 14:45:42 GMT"/>
							<outline text="try { //9/18/21 by DW" created="Sat, 18 Sep 2021 14:45:52 GMT">
								<outline text="message = JSON.parse (status.responseText).message;" created="Sat, 18 Sep 2021 14:46:09 GMT"/>
								<outline text="}" created="Sat, 18 Sep 2021 14:45:55 GMT"/>
								</outline>
							<outline text="catch (err) {" created="Sat, 18 Sep 2021 14:45:57 GMT">
								<outline text="message = status.responseText;" created="Sat, 18 Sep 2021 14:46:25 GMT"/>
								<outline text="}" created="Sat, 18 Sep 2021 14:46:00 GMT"/>
								</outline>
							<outline text="if ((message === undefined) || (message.length == 0)) { //7/22/22 by DW &amp; 8/31/22 by DW" created="Fri, 22 Jul 2022 16:29:46 GMT">
								<outline text="message = &quot;There was an error communicating with the server.&quot;;" created="Fri, 22 Jul 2022 16:30:07 GMT"/>
								<outline text="}" created="Fri, 22 Jul 2022 16:29:57 GMT"/>
								</outline>
							<outline text="var err = {">
								<outline text="code: status.status,"/>
								<outline text="message"/>
								<outline text="};"/>
								</outline>
							<outline text="callback (err);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="" created="Fri, 13 Dec 2024 22:48:04 GMT"/>
					<outline text="function sendMessage (theMessage, callback) {" created="Fri, 13 Dec 2024 17:15:36 GMT">
						<outline text="const newMessage = {role: &quot;user&quot;, content: theMessage};" created="Fri, 13 Dec 2024 23:01:25 GMT"/>
						<outline text="messages.push (newMessage);" created="Fri, 13 Dec 2024 22:48:52 GMT"/>
						<outline text="conversation.push (newMessage);" created="Fri, 13 Dec 2024 23:01:56 GMT"/>
						<outline text=""/>
						<outline text="const timeout = undefined; //accept the default" created="Fri, 13 Dec 2024 22:49:55 GMT"/>
						<outline text="const headers = {">
							<outline text="&quot;Content-Type&quot;: &quot;application/json&quot;,"/>
							<outline text="&quot;Authorization&quot;: `Bearer ${options.apiKey}`"/>
							<outline text="};"/>
							</outline>
						<outline text="const bodyStruct = {" created="Fri, 13 Dec 2024 17:20:56 GMT">
							<outline text="model: &quot;gpt-4&quot;,"/>
							<outline text="messages: messages"/>
							<outline text="};" created="Fri, 13 Dec 2024 17:21:05 GMT"/>
							</outline>
						<outline text="" created="Fri, 13 Dec 2024 17:16:31 GMT"/>
						<outline text="console.log (&quot;sendMessage: messages == &quot; + utils.jsonStringify (messages));" created="Mon, 16 Dec 2024 20:56:35 GMT"/>
						<outline text="options.httpRequestCallback (options.apiUrl, &quot;POST&quot;, timeout, headers, bodyStruct, function (err, dataFromChatGpt) {">
							<outline text="if (err) {" created="Fri, 13 Dec 2024 17:41:24 GMT">
								<outline text="console.log (err.message);" created="Fri, 13 Dec 2024 17:41:27 GMT"/>
								<outline text="if (callback !== undefined) {" created="Fri, 13 Dec 2024 22:54:14 GMT">
									<outline text="callback (err);" created="Fri, 13 Dec 2024 22:54:25 GMT"/>
									<outline text="}" created="Fri, 13 Dec 2024 22:54:24 GMT"/>
									</outline>
								<outline text="}" created="Fri, 13 Dec 2024 17:41:33 GMT"/>
								</outline>
							<outline text="else {" created="Fri, 13 Dec 2024 17:41:34 GMT">
								<outline text="const responseMessage = dataFromChatGpt.choices [0].message;" created="Fri, 13 Dec 2024 23:03:26 GMT"/>
								<outline text="console.log (&quot;sendMessage: responseMessage.content == &quot; + utils.jsonStringify (responseMessage.content));" created="Fri, 13 Dec 2024 17:41:27 GMT"/>
								<outline text="conversation.push (responseMessage.content);" created="Fri, 13 Dec 2024 23:01:56 GMT"/>
								<outline text="if (callback !== undefined) {" created="Fri, 13 Dec 2024 22:54:14 GMT">
									<outline text="callback (err, utils.jsonStringify (responseMessage.content));" created="Fri, 13 Dec 2024 22:54:25 GMT"/>
									<outline text="}" created="Fri, 13 Dec 2024 22:54:24 GMT"/>
									</outline>
								<outline text="}" created="Fri, 13 Dec 2024 17:41:35 GMT"/>
								</outline>
							<outline text="});" created="Fri, 13 Dec 2024 17:23:00 GMT"/>
							</outline>
						<outline text="}" created="Fri, 13 Dec 2024 17:16:29 GMT"/>
						</outline>
					<outline text="function getConversation () {" created="Fri, 13 Dec 2024 23:04:48 GMT">
						<outline text="return (conversation);" created="Fri, 13 Dec 2024 23:05:08 GMT"/>
						<outline text="}" created="Fri, 13 Dec 2024 23:04:53 GMT"/>
						</outline>
					<outline text="" created="Fri, 13 Dec 2024 22:40:20 GMT"/>
					<outline text="init ();" created="Fri, 13 Dec 2024 22:40:20 GMT"/>
					<outline text="this.sendMessage = sendMessage;" created="Fri, 13 Dec 2024 22:46:21 GMT"/>
					<outline text="this.getConversation = getConversation;" created="Fri, 13 Dec 2024 22:46:21 GMT"/>
					<outline text="this.init = init;" created="Fri, 13 Dec 2024 22:46:21 GMT"/>
					<outline text="}" created="Fri, 13 Dec 2024 22:40:18 GMT"/>
					</outline>
				<outline text="" created="Tue, 17 Dec 2024 22:45:52 GMT"/>
				<outline text="function chatWithChatGpt (userOptions) {" isComment="true" created="Fri, 13 Dec 2024 22:40:02 GMT">
					<outline text="const me = this;" created="Fri, 13 Dec 2024 22:46:14 GMT"/>
					<outline text="" created="Fri, 13 Dec 2024 22:40:19 GMT"/>
					<outline text="const options = {" created="Fri, 13 Dec 2024 22:40:20 GMT">
						<outline text="userPrompt: &quot;Greetings!&quot;," created="Fri, 13 Dec 2024 22:40:42 GMT"/>
						<outline text="apiUrl: &quot;https://api.openai.com/v1/chat/completions&quot;," created="Fri, 13 Dec 2024 22:40:51 GMT"/>
						<outline text="apiKey: undefined," created="Fri, 13 Dec 2024 22:41:17 GMT"/>
						<outline text="systemRole: &quot;You are a helpful assistant.&quot;," created="Sun, 15 Dec 2024 14:14:30 GMT"/>
						<outline text="httpRequestCallback: httpRequest //12/17/24 by DW" created="Tue, 17 Dec 2024 16:53:38 GMT"/>
						<outline text="};" created="Fri, 13 Dec 2024 22:40:29 GMT"/>
						</outline>
					<outline text="mergeOptions (userOptions, options);" created="Fri, 13 Dec 2024 22:51:54 GMT"/>
					<outline text="" created="Fri, 13 Dec 2024 22:48:31 GMT"/>
					<outline text="var messages, conversation;" created="Mon, 16 Dec 2024 20:55:56 GMT"/>
					<outline text="" created="Mon, 16 Dec 2024 20:56:03 GMT"/>
					<outline text="function init () {" created="Mon, 16 Dec 2024 20:55:10 GMT">
						<outline text="messages = [">
							<outline text="{role: &quot;system&quot;, content: options.systemRole}"/>
							<outline text="];"/>
							</outline>
						<outline text="conversation = [" created="Fri, 13 Dec 2024 23:00:37 GMT">
							<outline text="];" created="Fri, 13 Dec 2024 23:00:55 GMT"/>
							</outline>
						<outline text="}" created="Mon, 16 Dec 2024 20:55:14 GMT"/>
						</outline>
					<outline text="" created="Mon, 16 Dec 2024 20:55:43 GMT"/>
					<outline text="function httpRequest (url, method, timeout, headers, data, callback) { " isComment="true">
						<outline text="Changes" isComment="true">
							<outline text="7/22/22; 12:30:36 PM by DW" created="Fri, 22 Jul 2022 16:30:36 GMT">
								<outline text="If there's no message, say there was a communication error. We have to say something. ;-)" created="Fri, 22 Jul 2022 16:30:37 GMT"/>
								</outline>
							<outline text="9/18/21; 10:47:11 AM by DW" created="Sat, 18 Sep 2021 14:47:10 GMT">
								<outline text="When there's an error, usually there is a status.responseText to parse as JSON, but sometimes it fails. Now we account for that. " created="Sat, 18 Sep 2021 14:47:11 GMT"/>
								</outline>
							<outline text="7/20/20; 5:36:14 PM by DW">
								<outline text="Finally, I need a HTTP request routine that calls back in a standard way.">
									<outline text="function (err, data)"/>
									</outline>
								<outline text="No, I don't want to use promises."/>
								<outline text="for info about timeous see this page." isComment="true">
									<outline text="http://stackoverflow.com/questions/3543683/determine-if-ajax-error-is-a-timeout"/>
									</outline>
								</outline>
							</outline>
						<outline text="timeout = (timeout === undefined) ? 30000 : timeout;"/>
						<outline text="var jxhr = $.ajax ({ ">
							<outline text="url,"/>
							<outline text="method," created="Fri, 13 Dec 2024 17:40:11 GMT"/>
							<outline text="headers," created="Tue, 14 May 2013 14:35:06 GMT" pgfnum="23850"/>
							<outline text="timeout,"/>
							<outline text="data" created="Fri, 13 Dec 2024 17:40:38 GMT"/>
							<outline text="}) "/>
							</outline>
						<outline text=".success (function (data, status) { ">
							<outline text="callback (undefined, data);"/>
							<outline text="}) "/>
							</outline>
						<outline text=".error (function (status) { ">
							<outline text="var message;" created="Sat, 18 Sep 2021 14:45:42 GMT"/>
							<outline text="try { //9/18/21 by DW" created="Sat, 18 Sep 2021 14:45:52 GMT">
								<outline text="message = JSON.parse (status.responseText).message;" created="Sat, 18 Sep 2021 14:46:09 GMT"/>
								<outline text="}" created="Sat, 18 Sep 2021 14:45:55 GMT"/>
								</outline>
							<outline text="catch (err) {" created="Sat, 18 Sep 2021 14:45:57 GMT">
								<outline text="message = status.responseText;" created="Sat, 18 Sep 2021 14:46:25 GMT"/>
								<outline text="}" created="Sat, 18 Sep 2021 14:46:00 GMT"/>
								</outline>
							<outline text="if ((message === undefined) || (message.length == 0)) { //7/22/22 by DW &amp; 8/31/22 by DW" created="Fri, 22 Jul 2022 16:29:46 GMT">
								<outline text="message = &quot;There was an error communicating with the server.&quot;;" created="Fri, 22 Jul 2022 16:30:07 GMT"/>
								<outline text="}" created="Fri, 22 Jul 2022 16:29:57 GMT"/>
								</outline>
							<outline text="var err = {">
								<outline text="code: status.status,"/>
								<outline text="message"/>
								<outline text="};"/>
								</outline>
							<outline text="callback (err);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="" created="Fri, 13 Dec 2024 22:48:04 GMT"/>
					<outline text="function sendMessage (theMessage, callback) {" created="Fri, 13 Dec 2024 17:15:36 GMT">
						<outline text="const newMessage = {role: &quot;user&quot;, content: theMessage};" created="Fri, 13 Dec 2024 23:01:25 GMT"/>
						<outline text="messages.push (newMessage);" created="Fri, 13 Dec 2024 22:48:52 GMT"/>
						<outline text="conversation.push (newMessage);" created="Fri, 13 Dec 2024 23:01:56 GMT"/>
						<outline text=""/>
						<outline text="const timeout = undefined; //accept the default" created="Fri, 13 Dec 2024 22:49:55 GMT"/>
						<outline text="const headers = {">
							<outline text="&quot;Content-Type&quot;: &quot;application/json&quot;,"/>
							<outline text="&quot;Authorization&quot;: `Bearer ${options.apiKey}`"/>
							<outline text="};"/>
							</outline>
						<outline text="const bodyStruct = {" created="Fri, 13 Dec 2024 17:20:56 GMT">
							<outline text="model: &quot;gpt-4&quot;,"/>
							<outline text="messages: messages"/>
							<outline text="};" created="Fri, 13 Dec 2024 17:21:05 GMT"/>
							</outline>
						<outline text="" created="Fri, 13 Dec 2024 17:16:31 GMT"/>
						<outline text="console.log (&quot;sendMessage: messages == &quot; + jsonStringify (messages));" created="Mon, 16 Dec 2024 20:56:35 GMT"/>
						<outline text="options.httpRequestCallback (options.apiUrl, &quot;POST&quot;, timeout, headers, JSON.stringify (bodyStruct), function (err, dataFromChatGpt) {">
							<outline text="if (err) {" created="Fri, 13 Dec 2024 17:41:24 GMT">
								<outline text="console.log (err.message);" created="Fri, 13 Dec 2024 17:41:27 GMT"/>
								<outline text="if (callback !== undefined) {" created="Fri, 13 Dec 2024 22:54:14 GMT">
									<outline text="callback (err);" created="Fri, 13 Dec 2024 22:54:25 GMT"/>
									<outline text="}" created="Fri, 13 Dec 2024 22:54:24 GMT"/>
									</outline>
								<outline text="}" created="Fri, 13 Dec 2024 17:41:33 GMT"/>
								</outline>
							<outline text="else {" created="Fri, 13 Dec 2024 17:41:34 GMT">
								<outline text="const responseMessage = dataFromChatGpt.choices [0].message;" created="Fri, 13 Dec 2024 23:03:26 GMT"/>
								<outline text="console.log (&quot;sendMessage: responseMessage.content == &quot; + jsonStringify (responseMessage.content));" created="Fri, 13 Dec 2024 17:41:27 GMT"/>
								<outline text="conversation.push (responseMessage.content);" created="Fri, 13 Dec 2024 23:01:56 GMT"/>
								<outline text="if (callback !== undefined) {" created="Fri, 13 Dec 2024 22:54:14 GMT">
									<outline text="callback (err, jsonStringify (responseMessage.content));" created="Fri, 13 Dec 2024 22:54:25 GMT"/>
									<outline text="}" created="Fri, 13 Dec 2024 22:54:24 GMT"/>
									</outline>
								<outline text="}" created="Fri, 13 Dec 2024 17:41:35 GMT"/>
								</outline>
							<outline text="});" created="Fri, 13 Dec 2024 17:23:00 GMT"/>
							</outline>
						<outline text="}" created="Fri, 13 Dec 2024 17:16:29 GMT"/>
						</outline>
					<outline text="function getConversation () {" created="Fri, 13 Dec 2024 23:04:48 GMT">
						<outline text="return (conversation);" created="Fri, 13 Dec 2024 23:05:08 GMT"/>
						<outline text="}" created="Fri, 13 Dec 2024 23:04:53 GMT"/>
						</outline>
					<outline text="" created="Fri, 13 Dec 2024 22:40:20 GMT"/>
					<outline text="init ();" created="Fri, 13 Dec 2024 22:40:20 GMT"/>
					<outline text="me.sendMessage = sendMessage;" created="Fri, 13 Dec 2024 22:46:21 GMT"/>
					<outline text="me.getConversation = getConversation;" created="Fri, 13 Dec 2024 22:46:21 GMT"/>
					<outline text="me.init = init;" created="Fri, 13 Dec 2024 22:46:21 GMT"/>
					<outline text="}" created="Fri, 13 Dec 2024 22:40:18 GMT"/>
					</outline>
				</outline>
			<outline text="readme.md" created="Wed, 18 Dec 2024 15:29:50 GMT">
				<outline text="# davegpt">
					<outline text="Simple interface to Open API from Node and (eventually) browser JavaScript."/>
					</outline>
				<outline text="### Hello world" created="Wed, 18 Dec 2024 15:30:54 GMT">
					<outline text="The &lt;a href=&quot;https://github.com/scripting/davegpt/blob/main/test/test.js&quot;&gt;test app here&lt;/a&gt; is a simple Hello World app for using this package from Node.js." created="Wed, 18 Dec 2024 15:30:00 GMT"/>
					</outline>
				</outline>
			<outline text="test/package.json" created="Tue, 17 Dec 2024 23:34:48 GMT">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;testdavegpt&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Simple test app for davegpt&quot;," created="Fri, 02 Jul 2021 14:57:59 GMT"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;repository&quot;: {">
						<outline text="&quot;type&quot;: &quot;git&quot;,"/>
						<outline text="&quot;url&quot;: &quot;https://github.com/scripting/davegpt.git&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davegpt&quot;: &quot;*&quot;"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="test/test.js" created="Tue, 17 Dec 2024 23:35:10 GMT">
				<outline text="const fs = require (&quot;fs&quot;);" created="Tue, 17 Dec 2024 23:39:32 GMT"/>
				<outline text="const daveutils = require (&quot;daveutils&quot;);" created="Tue, 17 Dec 2024 23:35:18 GMT"/>
				<outline text="const davegpt = require (&quot;davegpt&quot;);" created="Tue, 17 Dec 2024 23:35:18 GMT"/>
				<outline text="const davegpt = require (&quot;../davegpt.js&quot;);" isComment="true" created="Tue, 17 Dec 2024 23:35:18 GMT"/>
				<outline text="" created="Tue, 17 Dec 2024 23:41:29 GMT"/>
				<outline text="var myChatGpt;" created="Tue, 17 Dec 2024 23:41:29 GMT"/>
				<outline text="" created="Tue, 17 Dec 2024 23:40:16 GMT"/>
				<outline text="fs.readFile (&quot;config.json&quot;, function (err, jsontext) {" created="Tue, 17 Dec 2024 23:40:16 GMT">
					<outline text="if (err) {" created="Tue, 17 Dec 2024 23:40:39 GMT">
						<outline text="console.log (err.message);" created="Tue, 17 Dec 2024 23:40:42 GMT"/>
						<outline text="}" created="Tue, 17 Dec 2024 23:40:48 GMT"/>
						</outline>
					<outline text="else {" created="Tue, 17 Dec 2024 23:40:48 GMT">
						<outline text="const config = JSON.parse (jsontext);" created="Tue, 17 Dec 2024 23:50:45 GMT"/>
						<outline text="const options = {" created="Fri, 13 Dec 2024 22:42:42 GMT">
							<outline text="apiKey: config.chatGptApiKey" created="Fri, 13 Dec 2024 22:42:53 GMT"/>
							<outline text="};" created="Fri, 13 Dec 2024 22:42:48 GMT"/>
							</outline>
						<outline text="myChatGpt = new davegpt.chatWithChatGpt (options);" created="Fri, 13 Dec 2024 22:42:43 GMT"/>
						<outline text="myChatGpt.sendMessage (config.messageText, function (err, responseText) {" created="Fri, 13 Dec 2024 22:44:30 GMT">
							<outline text="if (err) {" created="Mon, 16 Dec 2024 14:12:00 GMT">
								<outline text="console.log (err.message);" created="Mon, 16 Dec 2024 14:12:10 GMT"/>
								<outline text="}" created="Mon, 16 Dec 2024 14:12:04 GMT"/>
								</outline>
							<outline text="else {" created="Mon, 16 Dec 2024 14:12:04 GMT">
								<outline text="console.log (responseText);" created="Mon, 16 Dec 2024 14:12:10 GMT"/>
								<outline text="}" created="Mon, 16 Dec 2024 14:12:06 GMT"/>
								</outline>
							<outline text="});" created="Fri, 13 Dec 2024 22:58:45 GMT"/>
							</outline>
						<outline text="}" created="Tue, 17 Dec 2024 23:40:50 GMT"/>
						</outline>
					<outline text="});" created="Tue, 17 Dec 2024 23:40:36 GMT"/>
					</outline>
				</outline>
			<outline text="test/config.json" isComment="true" created="Tue, 17 Dec 2024 23:43:06 GMT">
				<outline text="{" created="Tue, 17 Dec 2024 23:43:10 GMT">
					<outline text="}" created="Tue, 17 Dec 2024 23:43:15 GMT"/>
					</outline>
				</outline>
			<outline text="client/styles.css" isComment="true">
				<outline text="body {">
					<outline text="font-family: Ubuntu;"/>
					<outline text="background-color: whitesmoke;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPageBody {">
					<outline text="width: 750px;" created="Sun, 14 Apr 2024 14:30:17 GMT"/>
					<outline text="margin-left: auto;"/>
					<outline text="margin-right: auto;"/>
					<outline text="margin-top: 100px;"/>
					<outline text="margin-bottom: 400px;" created="Fri, 11 Jun 2021 12:29:37 GMT"/>
					<outline text="border: 1px solid lightgreen;" isComment="true" created="Sat, 04 May 2024 14:25:34 GMT"/>
					<outline text="}"/>
					</outline>
				<outline text=".divWordPage {">
					<outline text="margin-top: 15px;"/>
					<outline text="margin-bottom: 400px;"/>
					<outline text="background-color: whitesmoke;"/>
					<outline text="z-index: 0;"/>
					<outline text="opacity: .9;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divExplanatoryText {">
					<outline text="line-height: 150%;"/>
					<outline text="margin-top: 3px;"/>
					<outline text="margin-bottom: 1em;"/>
					<outline text="width: 40%;"/>
					<outline text="font-size: 12px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divOutlinerContainer {">
					<outline text="width: 40%;" isComment="true"/>
					<outline text="margin-left: auto;"/>
					<outline text="margin-right: auto;"/>
					<outline text="border: 1px solid silver;" created="Fri, 07 Mar 2014 17:08:19 GMT" pgfnum="38600"/>
					<outline text="min-height: 400px;"/>
					<outline text="background-color: white;"/>
					<outline text="padding: 5px;"/>
					<outline text="margin-top: 10px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPageBackground {">
					<outline text="position: absolute;"/>
					<outline text="top: 0;"/>
					<outline text="left: 0;"/>
					<outline text="right: 0;"/>
					<outline text="bottom: 0;"/>
					<outline text="-webkit-background-size: cover;"/>
					<outline text="-moz-background-size: cover;"/>
					<outline text="-o-background-size: cover;"/>
					<outline text="background-size: cover;"/>
					<outline text="background-position: center;"/>
					<outline text="background-repeat: no-repeat;" created="Sat, 14 Dec 2013 22:05:27 GMT" pgfnum="33660"/>
					<outline text="z-index: -1;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divVersionNumber {">
					<outline text="font-size: 12px;"/>
					<outline text="float: right;"/>
					<outline text="padding: 3px;"/>
					<outline text="color: black;"/>
					<outline text="margin-top: -30px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divHeadline {">
					<outline text="font-family: &quot;Montserrat&quot;;"/>
					<outline text="font-size: 56px;"/>
					<outline text="line-height: 100%;"/>
					<outline text="display: table-cell;"/>
					<outline text="vertical-align: top;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divInfoIcon {">
					<outline text="font-size: 24px;"/>
					<outline text="vertical-align: top;"/>
					<outline text="display: table-cell;"/>
					<outline text="margin-left: 3px;"/>
					<outline text="color: seagreen;"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text=".divWordEntryBox {">
					<outline text="width: 40%;"/>
					<outline text="margin-left: auto;"/>
					<outline text="margin-right: auto;"/>
					<outline text="margin-top: 10px;"/>
					<outline text="margin-bottom: 10px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divWordEntryBox input[type=&quot;text&quot;] {">
					<outline text="font-family: &quot;Ubuntu&quot;;"/>
					<outline text="font-size: 18px;"/>
					<outline text="padding: 5px;"/>
					<outline text="width: 15em;"/>
					<outline text="height: 2em;"/>
					<outline text="display: table-cell;"/>
					<outline text="vertical-align: middle;"/>
					<outline text="margin-bottom: 0;"/>
					<outline text="}"/>
					</outline>
				<outline text=".btnValidate {">
					<outline text="font-family: &quot;Ubuntu&quot;;"/>
					<outline text="font-size: 16px;"/>
					<outline text="display: table-cell;"/>
					<outline text="vertical-align: middle;"/>
					<outline text="margin-left: 5px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divErrorMessage {">
					<outline text="color: red;"/>
					<outline text="}"/>
					</outline>
				<outline text="" created="Mon, 29 May 2023 15:56:34 GMT"/>
				<outline text=".divCommentsPrompt {" created="Mon, 29 May 2023 15:56:34 GMT">
					<outline text="font-size: 14px;" created="Mon, 29 May 2023 15:56:37 GMT"/>
					<outline text="margin-top: 14px;" created="Mon, 29 May 2023 15:57:47 GMT"/>
					<outline text="font-style: italic;" created="Mon, 29 May 2023 15:56:45 GMT"/>
					<outline text="text-align: center;" created="Mon, 29 May 2023 15:57:24 GMT"/>
					<outline text="}" created="Mon, 29 May 2023 15:56:51 GMT"/>
					</outline>
				</outline>
			<outline text="client/code.js" isComment="true" created="Mon, 06 Jun 2022 15:20:22 GMT">
				<outline text="var appConsts = {" created="Sun, 06 Jan 2013 16:22:16 GMT" pgfnum="16752">
					<outline text="&quot;productname&quot;: &quot;chatgptoutliner&quot;," created="Sun, 06 Jan 2013 15:39:06 GMT" pgfnum="16734"/>
					<outline text="&quot;productnameForDisplay&quot;: &quot;chatgptoutliner&quot;," created="Sun, 06 Jan 2013 15:39:06 GMT" pgfnum="16734"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;" created="Fri, 04 Jan 2013 22:12:08 GMT" pgfnum="16702"/>
					<outline text="}" created="Sun, 06 Jan 2013 16:22:26 GMT" pgfnum="16753"/>
					</outline>
				<outline text="var appPrefs = {" created="Fri, 04 Jan 2013 13:52:28 GMT" pgfnum="16628">
					<outline text="outlineFont: &quot;Ubuntu&quot;, outlineFontSize: 16, outlineLineHeight: 24," created="Fri, 04 Jan 2013 22:10:41 GMT" pgfnum="16699"/>
					<outline text="authorName: &quot;&quot;, authorEmail: &quot;&quot;," created="Fri, 22 Mar 2013 17:27:06 GMT" pgfnum="21119"/>
					<outline text="};" created="Fri, 04 Jan 2013 22:10:46 GMT" pgfnum="16700"/>
					</outline>
				<outline text="" created="Sun, 28 May 2023 16:56:34 GMT"/>
				<outline text="var whenLastUserAction = new Date (0), whenLastKeystroke = new Date (0);"/>
				<outline text=""/>
				<outline text="var localPrefs = { " created="Thu, 04 May 2023 20:52:47 GMT">
					<outline text="savedOpmltext: undefined, " created="Thu, 04 May 2023 20:53:56 GMT"/>
					<outline text="ctSaves: 0" created="Mon, 29 May 2023 14:16:18 GMT"/>
					<outline text="}" created="Thu, 04 May 2023 20:52:54 GMT"/>
					</outline>
				<outline text="var flLocalPrefsChanged = false;" created="Mon, 29 May 2023 14:24:10 GMT"/>
				<outline text="" created="Mon, 29 May 2023 14:24:21 GMT"/>
				<outline text="extra code" isComment="true" created="Mon, 16 Dec 2024 13:56:17 GMT">
					<outline text="function getUserSubscriptionList (username, callback) {" isComment="true" created="Sun, 28 May 2023 17:47:35 GMT">
						<outline text="Changes" isComment="true" created="Sun, 28 May 2023 17:48:27 GMT">
							<outline text="5/28/23; 1:48:30 PM by DW" created="Sun, 28 May 2023 17:48:29 GMT">
								<outline text="Example of a url. " created="Sun, 28 May 2023 17:48:30 GMT">
									<outline text="https://firesky.tv/lists/scripting.com/follows.opml" created="Sun, 28 May 2023 16:56:35 GMT"/>
									</outline>
								</outline>
							</outline>
						<outline text="const url = &quot;https://firesky.tv/lists/&quot; + username + &quot;/follows.opml&quot;;" created="Sun, 28 May 2023 17:47:53 GMT"/>
						<outline text="console.log (&quot;getUserSubscriptionList: url == &quot; + url);" created="Sun, 28 May 2023 19:00:39 GMT"/>
						<outline text="readHttpFileThruProxy (url, undefined, function (opmltext) {">
							<outline text="callback (undefined, opmltext);" created="Sun, 28 May 2023 17:49:25 GMT"/>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Sun, 28 May 2023 17:47:48 GMT"/>
						</outline>
					<outline text="function fixTextAtts () {" isComment="true" created="Mon, 29 May 2023 15:15:40 GMT">
						<outline text="$(&quot;.concord-text&quot;).each (function () {" created="Sun, 28 May 2023 19:02:50 GMT">
							<outline text="var theText = $(this).text ();" created="Sun, 28 May 2023 19:03:17 GMT"/>
							<outline text="if (beginsWith (theText, &quot;@&quot;)) {" created="Sun, 28 May 2023 19:05:58 GMT">
								<outline text="theText = stringDelete (theText, 1, 1);" created="Sun, 28 May 2023 19:06:15 GMT"/>
								<outline text="theText = replaceAll (theText, &quot; on Bluesky&quot;, &quot;&quot;);" created="Sun, 28 May 2023 19:07:15 GMT"/>
								<outline text="$(this).text (theText)"/>
								<outline text="}" created="Sun, 28 May 2023 19:06:11 GMT"/>
								</outline>
							<outline text="});" created="Sun, 28 May 2023 19:03:09 GMT"/>
							</outline>
						<outline text="}" created="Mon, 29 May 2023 15:15:48 GMT"/>
						</outline>
					<outline text="function viewSubscriptionList (username, callback) {" isComment="true" created="Sun, 28 May 2023 17:53:58 GMT">
						<outline text="$(&quot;#outliner&quot;).empty ();" created="Mon, 29 May 2023 13:59:54 GMT"/>
						<outline text="getUserSubscriptionList (username, function (err, opmltext) {" created="Sun, 28 May 2023 17:54:15 GMT">
							<outline text="viewOutline (opmltext);" created="Sun, 28 May 2023 19:02:50 GMT"/>
							<outline text="if (callback !== undefined) {" created="Sun, 28 May 2023 17:56:20 GMT">
								<outline text="callback ();" created="Sun, 28 May 2023 17:56:35 GMT"/>
								<outline text="}" created="Sun, 28 May 2023 17:56:25 GMT"/>
								</outline>
							<outline text="});" created="Sun, 28 May 2023 17:54:32 GMT"/>
							</outline>
						<outline text="}" created="Sun, 28 May 2023 17:54:10 GMT"/>
						</outline>
					<outline text="function lookupButtonClick () {" isComment="true">
						<outline text="var username = $(&quot;#idUsernameInput&quot;).val ();"/>
						<outline text="viewSubscriptionList (username);" created="Sun, 28 May 2023 17:56:04 GMT"/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="" created="Mon, 16 Dec 2024 14:00:19 GMT"/>
				<outline text="//chatGPT stuff" created="Mon, 16 Dec 2024 14:00:19 GMT">
					<outline text="var myChatGpt = undefined;" created="Fri, 13 Dec 2024 22:44:02 GMT"/>
					<outline text="" created="Fri, 13 Dec 2024 22:44:12 GMT"/>
					<outline text="function chatWithChatGpt (userOptions) {" created="Fri, 13 Dec 2024 22:40:02 GMT">
						<outline text="const me = this;" created="Fri, 13 Dec 2024 22:46:14 GMT"/>
						<outline text="" created="Fri, 13 Dec 2024 22:40:19 GMT"/>
						<outline text="const options = {" created="Fri, 13 Dec 2024 22:40:20 GMT">
							<outline text="userPrompt: &quot;Greetings!&quot;," created="Fri, 13 Dec 2024 22:40:42 GMT"/>
							<outline text="apiUrl: &quot;https://api.openai.com/v1/chat/completions&quot;," created="Fri, 13 Dec 2024 22:40:51 GMT"/>
							<outline text="apiKey: undefined," created="Fri, 13 Dec 2024 22:41:17 GMT"/>
							<outline text="systemRole: &quot;You are a helpful assistant.&quot;," created="Sun, 15 Dec 2024 14:14:30 GMT"/>
							<outline text="httpRequestCallback: httpRequest //12/17/24 by DW" created="Tue, 17 Dec 2024 16:53:38 GMT"/>
							<outline text="};" created="Fri, 13 Dec 2024 22:40:29 GMT"/>
							</outline>
						<outline text="mergeOptions (userOptions, options);" created="Fri, 13 Dec 2024 22:51:54 GMT"/>
						<outline text="" created="Fri, 13 Dec 2024 22:48:31 GMT"/>
						<outline text="var messages, conversation;" created="Mon, 16 Dec 2024 20:55:56 GMT"/>
						<outline text="" created="Mon, 16 Dec 2024 20:56:03 GMT"/>
						<outline text="function init () {" created="Mon, 16 Dec 2024 20:55:10 GMT">
							<outline text="messages = [">
								<outline text="{role: &quot;system&quot;, content: options.systemRole}"/>
								<outline text="];"/>
								</outline>
							<outline text="conversation = [" created="Fri, 13 Dec 2024 23:00:37 GMT">
								<outline text="];" created="Fri, 13 Dec 2024 23:00:55 GMT"/>
								</outline>
							<outline text="}" created="Mon, 16 Dec 2024 20:55:14 GMT"/>
							</outline>
						<outline text="" created="Mon, 16 Dec 2024 20:55:43 GMT"/>
						<outline text="function httpRequest (url, method, timeout, headers, data, callback) { ">
							<outline text="Changes" isComment="true">
								<outline text="7/22/22; 12:30:36 PM by DW" created="Fri, 22 Jul 2022 16:30:36 GMT">
									<outline text="If there's no message, say there was a communication error. We have to say something. ;-)" created="Fri, 22 Jul 2022 16:30:37 GMT"/>
									</outline>
								<outline text="9/18/21; 10:47:11 AM by DW" created="Sat, 18 Sep 2021 14:47:10 GMT">
									<outline text="When there's an error, usually there is a status.responseText to parse as JSON, but sometimes it fails. Now we account for that. " created="Sat, 18 Sep 2021 14:47:11 GMT"/>
									</outline>
								<outline text="7/20/20; 5:36:14 PM by DW">
									<outline text="Finally, I need a HTTP request routine that calls back in a standard way.">
										<outline text="function (err, data)"/>
										</outline>
									<outline text="No, I don't want to use promises."/>
									<outline text="for info about timeous see this page." isComment="true">
										<outline text="http://stackoverflow.com/questions/3543683/determine-if-ajax-error-is-a-timeout"/>
										</outline>
									</outline>
								</outline>
							<outline text="timeout = (timeout === undefined) ? 30000 : timeout;"/>
							<outline text="var jxhr = $.ajax ({ ">
								<outline text="url,"/>
								<outline text="method," created="Fri, 13 Dec 2024 17:40:11 GMT"/>
								<outline text="headers," created="Tue, 14 May 2013 14:35:06 GMT" pgfnum="23850"/>
								<outline text="timeout,"/>
								<outline text="data" created="Fri, 13 Dec 2024 17:40:38 GMT"/>
								<outline text="}) "/>
								</outline>
							<outline text=".success (function (data, status) { ">
								<outline text="callback (undefined, data);"/>
								<outline text="}) "/>
								</outline>
							<outline text=".error (function (status) { ">
								<outline text="var message;" created="Sat, 18 Sep 2021 14:45:42 GMT"/>
								<outline text="try { //9/18/21 by DW" created="Sat, 18 Sep 2021 14:45:52 GMT">
									<outline text="message = JSON.parse (status.responseText).message;" created="Sat, 18 Sep 2021 14:46:09 GMT"/>
									<outline text="}" created="Sat, 18 Sep 2021 14:45:55 GMT"/>
									</outline>
								<outline text="catch (err) {" created="Sat, 18 Sep 2021 14:45:57 GMT">
									<outline text="message = status.responseText;" created="Sat, 18 Sep 2021 14:46:25 GMT"/>
									<outline text="}" created="Sat, 18 Sep 2021 14:46:00 GMT"/>
									</outline>
								<outline text="if ((message === undefined) || (message.length == 0)) { //7/22/22 by DW &amp; 8/31/22 by DW" created="Fri, 22 Jul 2022 16:29:46 GMT">
									<outline text="message = &quot;There was an error communicating with the server.&quot;;" created="Fri, 22 Jul 2022 16:30:07 GMT"/>
									<outline text="}" created="Fri, 22 Jul 2022 16:29:57 GMT"/>
									</outline>
								<outline text="var err = {">
									<outline text="code: status.status,"/>
									<outline text="message"/>
									<outline text="};"/>
									</outline>
								<outline text="callback (err);"/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="" created="Fri, 13 Dec 2024 22:48:04 GMT"/>
						<outline text="function sendMessage (theMessage, callback) {" created="Fri, 13 Dec 2024 17:15:36 GMT">
							<outline text="const newMessage = {role: &quot;user&quot;, content: theMessage};" created="Fri, 13 Dec 2024 23:01:25 GMT"/>
							<outline text="messages.push (newMessage);" created="Fri, 13 Dec 2024 22:48:52 GMT"/>
							<outline text="conversation.push (newMessage);" created="Fri, 13 Dec 2024 23:01:56 GMT"/>
							<outline text=""/>
							<outline text="const timeout = undefined; //accept the default" created="Fri, 13 Dec 2024 22:49:55 GMT"/>
							<outline text="const headers = {">
								<outline text="&quot;Content-Type&quot;: &quot;application/json&quot;,"/>
								<outline text="&quot;Authorization&quot;: `Bearer ${options.apiKey}`"/>
								<outline text="};"/>
								</outline>
							<outline text="const bodyStruct = {" created="Fri, 13 Dec 2024 17:20:56 GMT">
								<outline text="model: &quot;gpt-4&quot;,"/>
								<outline text="messages: messages"/>
								<outline text="};" created="Fri, 13 Dec 2024 17:21:05 GMT"/>
								</outline>
							<outline text="" created="Fri, 13 Dec 2024 17:16:31 GMT"/>
							<outline text="console.log (&quot;sendMessage: messages == &quot; + jsonStringify (messages));" created="Mon, 16 Dec 2024 20:56:35 GMT"/>
							<outline text="options.httpRequestCallback (options.apiUrl, &quot;POST&quot;, timeout, headers, JSON.stringify (bodyStruct), function (err, dataFromChatGpt) {">
								<outline text="if (err) {" created="Fri, 13 Dec 2024 17:41:24 GMT">
									<outline text="console.log (err.message);" created="Fri, 13 Dec 2024 17:41:27 GMT"/>
									<outline text="if (callback !== undefined) {" created="Fri, 13 Dec 2024 22:54:14 GMT">
										<outline text="callback (err);" created="Fri, 13 Dec 2024 22:54:25 GMT"/>
										<outline text="}" created="Fri, 13 Dec 2024 22:54:24 GMT"/>
										</outline>
									<outline text="}" created="Fri, 13 Dec 2024 17:41:33 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 13 Dec 2024 17:41:34 GMT">
									<outline text="const responseMessage = dataFromChatGpt.choices [0].message;" created="Fri, 13 Dec 2024 23:03:26 GMT"/>
									<outline text="console.log (&quot;sendMessage: responseMessage.content == &quot; + jsonStringify (responseMessage.content));" created="Fri, 13 Dec 2024 17:41:27 GMT"/>
									<outline text="conversation.push (responseMessage.content);" created="Fri, 13 Dec 2024 23:01:56 GMT"/>
									<outline text="if (callback !== undefined) {" created="Fri, 13 Dec 2024 22:54:14 GMT">
										<outline text="callback (err, jsonStringify (responseMessage.content));" created="Fri, 13 Dec 2024 22:54:25 GMT"/>
										<outline text="}" created="Fri, 13 Dec 2024 22:54:24 GMT"/>
										</outline>
									<outline text="}" created="Fri, 13 Dec 2024 17:41:35 GMT"/>
									</outline>
								<outline text="});" created="Fri, 13 Dec 2024 17:23:00 GMT"/>
								</outline>
							<outline text="}" created="Fri, 13 Dec 2024 17:16:29 GMT"/>
							</outline>
						<outline text="function getConversation () {" created="Fri, 13 Dec 2024 23:04:48 GMT">
							<outline text="return (conversation);" created="Fri, 13 Dec 2024 23:05:08 GMT"/>
							<outline text="}" created="Fri, 13 Dec 2024 23:04:53 GMT"/>
							</outline>
						<outline text="" created="Fri, 13 Dec 2024 22:40:20 GMT"/>
						<outline text="init ();" created="Fri, 13 Dec 2024 22:40:20 GMT"/>
						<outline text="me.sendMessage = sendMessage;" created="Fri, 13 Dec 2024 22:46:21 GMT"/>
						<outline text="me.getConversation = getConversation;" created="Fri, 13 Dec 2024 22:46:21 GMT"/>
						<outline text="me.init = init;" created="Fri, 13 Dec 2024 22:46:21 GMT"/>
						<outline text="}" created="Fri, 13 Dec 2024 22:40:18 GMT"/>
						</outline>
					<outline text="function insertChatGptResponse (theText) {" created="Mon, 16 Dec 2024 14:00:20 GMT">
						<outline text="theText = stringMid (theText, 2, theText.length - 1); //remove double quotes at beginning and end" created="Mon, 16 Dec 2024 20:44:18 GMT"/>
						<outline text="console.log (theText);" isComment="true" created="Mon, 16 Dec 2024 20:44:19 GMT"/>
						<outline text="" created="Mon, 16 Dec 2024 20:44:19 GMT"/>
						<outline text="const splits = theText.split (&quot;\\n&quot;);"/>
						<outline text="console.log (splits);" isComment="true" created="Mon, 16 Dec 2024 20:44:19 GMT"/>
						<outline text="" created="Mon, 16 Dec 2024 20:48:22 GMT"/>
						<outline text="var dir = right;" created="Mon, 16 Dec 2024 14:29:05 GMT"/>
						<outline text="opDeleteSubs ();" created="Mon, 16 Dec 2024 20:48:22 GMT"/>
						<outline text="splits.forEach (function (item) {" created="Mon, 16 Dec 2024 14:25:42 GMT">
							<outline text="item = item.replace (/\\/g, &quot;&quot;); " isComment="true" created="Mon, 16 Dec 2024 21:04:35 GMT"/>
							<outline text="" created="Mon, 16 Dec 2024 21:06:18 GMT"/>
							<outline text="item = replaceAll (item, '\\&quot;', '&quot;')" created="Mon, 16 Dec 2024 21:06:18 GMT"/>
							<outline text="" created="Mon, 16 Dec 2024 21:06:18 GMT"/>
							<outline text="" created="Mon, 16 Dec 2024 21:06:18 GMT"/>
							<outline text="opInsert (item, dir);" created="Mon, 16 Dec 2024 14:29:10 GMT"/>
							<outline text="dir = down;" created="Mon, 16 Dec 2024 14:29:18 GMT"/>
							<outline text="});" created="Mon, 16 Dec 2024 14:28:58 GMT"/>
							</outline>
						<outline text="opGo (left, 1);" created="Mon, 16 Dec 2024 14:12:56 GMT"/>
						<outline text="}" created="Mon, 16 Dec 2024 20:42:58 GMT"/>
						</outline>
					<outline text="function startChatGpt () {" created="Fri, 13 Dec 2024 22:40:01 GMT">
						<outline text="console.log (&quot;startChatGpt&quot;);" created="Fri, 13 Dec 2024 23:07:02 GMT"/>
						<outline text="const options = {" created="Fri, 13 Dec 2024 22:42:42 GMT">
							<outline text="apiKey: localStorage.chatGptApiKey" created="Fri, 13 Dec 2024 22:42:53 GMT"/>
							<outline text="};" created="Fri, 13 Dec 2024 22:42:48 GMT"/>
							</outline>
						<outline text="myChatGpt = new chatWithChatGpt (options);" created="Fri, 13 Dec 2024 22:42:43 GMT"/>
						<outline text="}" created="Fri, 13 Dec 2024 22:42:41 GMT"/>
						</outline>
					<outline text="function goButtonClick () {" created="Mon, 16 Dec 2024 14:00:20 GMT">
						<outline text="function respondWith (theText) {" created="Mon, 16 Dec 2024 14:12:34 GMT">
							<outline text="localStorage.s = theText;" created="Mon, 16 Dec 2024 16:04:09 GMT"/>
							<outline text="insertChatGptResponse (theText);" created="Mon, 16 Dec 2024 16:04:09 GMT"/>
							<outline text="}" created="Mon, 16 Dec 2024 14:12:42 GMT"/>
							</outline>
						<outline text="myChatGpt.sendMessage (opGetLineText (), function (err, responseText) {" created="Fri, 13 Dec 2024 22:44:30 GMT">
							<outline text="if (err) {" created="Mon, 16 Dec 2024 14:12:00 GMT">
								<outline text="respondWith (err.message);" created="Mon, 16 Dec 2024 14:12:10 GMT"/>
								<outline text="}" created="Mon, 16 Dec 2024 14:12:04 GMT"/>
								</outline>
							<outline text="else {" created="Mon, 16 Dec 2024 14:12:04 GMT">
								<outline text="respondWith (responseText);" created="Mon, 16 Dec 2024 14:12:10 GMT"/>
								<outline text="}" created="Mon, 16 Dec 2024 14:12:06 GMT"/>
								</outline>
							<outline text="});" created="Fri, 13 Dec 2024 22:58:45 GMT"/>
							</outline>
						<outline text="}" created="Mon, 16 Dec 2024 14:00:25 GMT"/>
						</outline>
					</outline>
				<outline text="" created="Mon, 16 Dec 2024 16:03:22 GMT"/>
				<outline text="function testInsertResponse () {" created="Mon, 16 Dec 2024 14:00:20 GMT">
					<outline text="insertChatGptResponse (localStorage.s);" created="Mon, 16 Dec 2024 20:43:24 GMT"/>
					<outline text="}" created="Mon, 16 Dec 2024 20:43:23 GMT"/>
					<outline text="" created="Mon, 16 Dec 2024 20:43:30 GMT"/>
					</outline>
				<outline text="" created="Mon, 16 Dec 2024 13:56:34 GMT"/>
				<outline text="function saveLocalPrefs () {" created="Thu, 04 May 2023 20:55:36 GMT">
					<outline text="console.log (&quot;saveLocalPrefs&quot;);" isComment="true" created="Mon, 29 May 2023 14:34:23 GMT"/>
					<outline text="localPrefs.ctSaves++;" created="Mon, 29 May 2023 14:19:13 GMT"/>
					<outline text="localPrefs.savedOpmltext = opOutlineToXml ();" created="Mon, 11 Mar 2013 21:00:14 GMT" pgfnum="20171"/>
					<outline text="localStorage.localPrefsBlueskyOutliner = jsonStringify (localPrefs);" created="Thu, 04 May 2023 20:55:47 GMT"/>
					<outline text="}" created="Thu, 04 May 2023 20:55:41 GMT"/>
					</outline>
				<outline text="function localPrefsChanged () {" created="Thu, 04 May 2023 20:55:36 GMT">
					<outline text="flLocalPrefsChanged = true;" created="Mon, 29 May 2023 14:24:26 GMT"/>
					<outline text="}" created="Thu, 04 May 2023 20:55:41 GMT"/>
					</outline>
				<outline text="" created="Mon, 29 May 2023 15:15:40 GMT"/>
				<outline text="function addToolTip (theObject, tipText, placement=&quot;right&quot;) { //8/24/22 by DW" created="Wed, 24 Aug 2022 12:58:59 GMT">
					<outline text="Changes" isComment="true" created="Sun, 23 Oct 2022 16:41:23 GMT">
						<outline text="11/1/22; 9:55:02 AM by DW" created="Tue, 01 Nov 2022 13:55:01 GMT">
							<outline text="In some circumstances, when you click on an item with a tooltip, the tooltip lingers around after the click. I added code that looks for the click and hides the tooltip." created="Tue, 01 Nov 2022 13:55:02 GMT"/>
							</outline>
						<outline text="10/23/22; 12:41:25 PM by DW" created="Sun, 23 Oct 2022 16:41:24 GMT">
							<outline text="Some tooltips I link to menu items are cut off at the boundary of something related to menus. The recommended way to deal with it is to add a data-container value of body." created="Sun, 23 Oct 2022 16:41:26 GMT">
								<outline text="https://getbootstrap.com/docs/4.0/components/popovers/#example-using-the-container-option"/>
								</outline>
							</outline>
						</outline>
					<outline text="$(theObject).attr (&quot;data-container&quot;, &quot;body&quot;); //10/23/22 by DW" created="Sat, 07 May 2022 15:24:22 GMT"/>
					<outline text="$(theObject).attr (&quot;data-toggle&quot;, &quot;tooltip&quot;);" created="Sat, 07 May 2022 15:24:22 GMT"/>
					<outline text="$(theObject).attr (&quot;data-placement&quot;, placement);" created="Sat, 07 May 2022 15:24:22 GMT"/>
					<outline text="$(theObject).attr (&quot;title&quot;, tipText);" created="Sat, 07 May 2022 15:24:22 GMT"/>
					<outline text="$(theObject).click (function () { //11/1/22 by DW" created="Sat, 07 May 2022 15:24:22 GMT">
						<outline text="$(theObject).tooltip (&quot;hide&quot;);"/>
						<outline text="});" created="Tue, 01 Nov 2022 13:52:12 GMT"/>
						</outline>
					<outline text="theObject.tooltip ();" created="Wed, 07 Sep 2022 13:47:09 GMT"/>
					<outline text="return (theObject);" created="Wed, 24 Aug 2022 13:14:21 GMT"/>
					<outline text="}" created="Wed, 24 Aug 2022 12:59:36 GMT"/>
					</outline>
				<outline text="" created="Mon, 29 May 2023 16:35:26 GMT"/>
				<outline text="" created="Sun, 28 May 2023 17:47:35 GMT"/>
				<outline text="function expandCallback () {">
					<outline text="var username = opGetLineText ();" isComment="true" created="Mon, 29 May 2023 14:41:51 GMT"/>
					<outline text="console.log (&quot;expandCallback: &quot; + opGetAttsDisplayString ());" isComment="true"/>
					<outline text="getUserSubscriptionList (username, function (err, opmltext) {" isComment="true" created="Sun, 28 May 2023 17:54:15 GMT">
						<outline text="opDeleteSubs ();"/>
						<outline text="opInsertXml (opmltext, right); "/>
						<outline text="fixTextAtts ();"/>
						<outline text="});" created="Sun, 28 May 2023 17:54:32 GMT"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function setOutlinerPrefs (id, flRenderMode, flReadonly) {" created="Sat, 16 Feb 2013 22:13:36 GMT" pgfnum="18835">
					<outline text="$(id).concord ({">
						<outline text="prefs: {" created="Sat, 16 Feb 2013 23:53:21 GMT" pgfnum="18844">
							<outline text="outlineFont: appPrefs.outlineFont, " created="Sat, 16 Feb 2013 23:54:59 GMT" pgfnum="18846"/>
							<outline text="outlineFontSize: appPrefs.outlineFontSize, " created="Sat, 16 Feb 2013 23:55:30 GMT" pgfnum="18848"/>
							<outline text="outlineLineHeight: appPrefs.outlineLineHeight," created="Sat, 16 Feb 2013 23:55:34 GMT" pgfnum="18849"/>
							<outline text="renderMode: flRenderMode," created="Sun, 17 Feb 2013 23:25:34 GMT" pgfnum="18920"/>
							<outline text="readonly: flReadonly," created="Wed, 27 Feb 2013 20:15:13 GMT" pgfnum="19288"/>
							<outline text="typeIcons: opTypeIcons"/>
							<outline text="}," created="Sat, 16 Feb 2013 23:55:08 GMT" pgfnum="18847"/>
							</outline>
						<outline text="callbacks: {" created="Sun, 17 Feb 2013 16:58:55 GMT" pgfnum="18876">
							<outline text="opInsert: opInsertCallback," created="Tue, 08 Jan 2013 17:24:49 GMT" pgfnum="16878"/>
							<outline text="opCursorMoved: function (op) {" created="Tue, 08 Jan 2013 17:24:49 GMT" pgfnum="16878">
								<outline text="localPrefsChanged ();" created="Mon, 29 May 2023 14:40:43 GMT"/>
								<outline text="$(&quot;#idUsernameInput&quot;).val (opGetLineText ());" isComment="true" created="Sun, 28 May 2023 16:57:16 GMT"/>
								<outline text="},"/>
								</outline>
							<outline text="opExpand: function (op) {" created="Mon, 11 Feb 2013 16:41:26 GMT" pgfnum="18511">
								<outline text="whenLastUserAction = new Date (); " created="Fri, 04 Apr 2014 21:09:34 GMT" pgfnum="39965"/>
								<outline text="expandCallback ();"/>
								<outline text="},"/>
								</outline>
							<outline text="opCollapse: function (op) {">
								<outline text="opDeleteSubs ();"/>
								<outline text="},"/>
								</outline>
							<outline text="opHover: function (op) {" created="Mon, 11 Feb 2013 16:41:26 GMT" pgfnum="18511">
								<outline text="},"/>
								</outline>
							<outline text="opKeystroke: function (ev) {" created="Tue, 08 Jan 2013 17:24:49 GMT" pgfnum="16878">
								<outline text="const now = new Date ();" created="Thu, 28 Feb 2013 23:49:58 GMT" pgfnum="19378"/>
								<outline text="whenLastKeystroke = now; " created="Fri, 01 Feb 2013 00:29:55 GMT" pgfnum="18029"/>
								<outline text="whenLastUserAction = now;"/>
								<outline text="console.log (ev.concord.keystrokeString);" isComment="true" created="Mon, 16 Dec 2024 13:59:02 GMT"/>
								<outline text="switch (ev.concord.keystrokeString) {" isComment="true">
									<outline text="case &quot;return&quot;:" created="Wed, 29 Sep 2021 20:44:21 GMT">
										<outline text="console.log (opGetLineText ())" created="Mon, 16 Dec 2024 14:02:00 GMT"/>
										<outline text="opReorg (right, 1)" created="Mon, 16 Dec 2024 14:03:19 GMT"/>
										<outline text="sendMessagesToChatGPT ();" isComment="true" created="Mon, 16 Dec 2024 13:59:54 GMT"/>
										<outline text="ev.concord.flKeyCaptured = true;"/>
										<outline text="break;" created="Wed, 29 Sep 2021 20:44:42 GMT"/>
										</outline>
									<outline text="case &quot;meta-F&quot;:" isComment="true" created="Wed, 29 Sep 2021 20:44:21 GMT">
										<outline text="opFindCommand ();"/>
										<outline text="ev.concord.flKeyCaptured = true;"/>
										<outline text="break;" created="Wed, 29 Sep 2021 20:44:42 GMT"/>
										</outline>
									<outline text="case &quot;meta-G&quot;:" isComment="true" created="Wed, 29 Sep 2021 20:44:21 GMT">
										<outline text="opFindAgainCommand ();"/>
										<outline text="ev.concord.flKeyCaptured = true;"/>
										<outline text="break;" created="Wed, 29 Sep 2021 20:44:42 GMT"/>
										</outline>
									<outline text="case &quot;meta-K&quot;:" isComment="true">
										<outline text="linkIconClick ();"/>
										<outline text="ev.concord.flKeyCaptured = true;"/>
										<outline text="break;"/>
										</outline>
									<outline text="case &quot;meta-4&quot;:" isComment="true">
										<outline text="opInsert (new Date ().toLocaleDateString () + &quot; by &quot; + &quot;DW&quot;, down);" created="Tue, 20 Apr 2021 17:00:07 GMT"/>
										<outline text="ev.concord.flKeyCaptured = true;"/>
										<outline text="break;"/>
										</outline>
									<outline text="case &quot;backspace&quot;:" isComment="true">
										<outline text="opMarkChanged ();"/>
										<outline text="break;"/>
										</outline>
									<outline text="case &quot;paste&quot;: " isComment="true" created="Mon, 10 May 2021 17:18:08 GMT">
										<outline text="console.log (&quot;paste&quot;); //a place for a breakpoint" created="Mon, 10 May 2021 17:18:12 GMT"/>
										<outline text="break;" created="Mon, 10 May 2021 17:18:18 GMT"/>
										</outline>
									<outline text="case &quot;run-selection&quot;: //2/19/21 by DW" created="Fri, 19 Feb 2021 15:21:57 GMT">
										<outline text="runCursorScript ();" created="Fri, 19 Feb 2021 15:52:34 GMT"/>
										<outline text="ev.concord.flKeyCaptured = true;"/>
										<outline text="break;"/>
										</outline>
									<outline text="case &quot;meta-meta-/&quot;:" isComment="true">
										<outline text="showCribsheet ();"/>
										<outline text="ev.concord.flKeyCaptured = true;"/>
										<outline text="break;"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}" created="Sun, 17 Feb 2013 16:59:03 GMT" pgfnum="18877"/>
							</outline>
						<outline text="});" created="Sat, 16 Feb 2013 23:53:44 GMT" pgfnum="18845"/>
						</outline>
					<outline text="}" created="Sat, 16 Feb 2013 22:13:41 GMT" pgfnum="18836"/>
					</outline>
				<outline text="" created="Mon, 29 May 2023 14:38:26 GMT"/>
				<outline text="function setupPageBackground () {">
					<outline text="var s = &quot;&quot;;"/>
					<outline text="for (var i = 0; i &lt; 10000; i++) {">
						<outline text="s += &quot;123 &quot;;"/>
						<outline text="}"/>
						</outline>
					<outline text="$(&quot;#idPageBackground&quot;).html (s);"/>
					<outline text="}"/>
					</outline>
				<outline text="" created="Mon, 16 Dec 2024 13:56:16 GMT"/>
				<outline text="" created="Mon, 29 May 2023 14:38:35 GMT"/>
				<outline text="function viewOutline (opmltext) {" created="Mon, 29 May 2023 14:04:35 GMT">
					<outline text="setOutlinerPrefs (&quot;#outliner&quot;, true, false);" created="Sun, 17 Feb 2013 16:07:05 GMT" pgfnum="18857"/>
					<outline text="opSetFont (appPrefs.outlineFont, appPrefs.outlineFontSize, appPrefs.outlineLineHeight); " created="Sun, 17 Mar 2013 17:13:11 GMT" pgfnum="20597"/>
					<outline text="opXmlToOutline (opmltext);" created="Sun, 28 May 2023 17:55:06 GMT"/>
					<outline text="opSort ();" isComment="true"/>
					<outline text="fixTextAtts ();" isComment="true" created="Mon, 29 May 2023 15:15:56 GMT"/>
					<outline text="localPrefsChanged ();"/>
					<outline text="}" created="Mon, 29 May 2023 14:04:43 GMT"/>
					</outline>
				<outline text="" created="Mon, 16 Dec 2024 13:56:04 GMT"/>
				<outline text="function everySecond () {">
					<outline text="if (flLocalPrefsChanged || opHasChanged ()) {" created="Mon, 29 May 2023 14:24:41 GMT">
						<outline text="flLocalPrefsChanged = false;" created="Mon, 29 May 2023 14:24:44 GMT"/>
						<outline text="opClearChanged ();"/>
						<outline text="saveLocalPrefs ();" created="Mon, 29 May 2023 14:24:47 GMT"/>
						<outline text="}" created="Mon, 29 May 2023 14:24:49 GMT"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function startup () {">
					<outline text="console.log (&quot;startup&quot;);" created="Sun, 28 May 2023 16:57:16 GMT">
						<outline text="startChatGpt (); //12/16/24 by DW"/>
						</outline>
					<outline text="if (localStorage.localPrefsBlueskyOutliner !== undefined) {" created="Sat, 22 Apr 2023 17:01:23 GMT">
						<outline text="try {" created="Sat, 29 Apr 2023 17:34:39 GMT">
							<outline text="localPrefs = JSON.parse (localStorage.localPrefsBlueskyOutliner);" created="Sat, 22 Apr 2023 17:01:35 GMT"/>
							<outline text="}" created="Sat, 29 Apr 2023 17:34:41 GMT"/>
							</outline>
						<outline text="catch (err) {" created="Sat, 29 Apr 2023 17:34:42 GMT">
							<outline text="console.log (&quot;localStorage.localPrefs, err.message == &quot; + err.message);" created="Sat, 29 Apr 2023 17:34:51 GMT"/>
							<outline text="}" created="Sat, 29 Apr 2023 17:34:45 GMT"/>
							</outline>
						<outline text="}" created="Sat, 22 Apr 2023 17:01:34 GMT"/>
						</outline>
					<outline text="$(&quot;#idVersionNumber&quot;).html (&quot;v&quot; + appConsts.version);"/>
					<outline text="$(&quot;#idUsernameInput&quot;).val (&quot;scripting.com&quot;);" created="Sun, 28 May 2023 16:57:16 GMT"/>
					<outline text="addToolTip ($(&quot;#idLookupButton&quot;), &quot;See the help at the bottom of the page.&quot;);" isComment="true" created="Mon, 29 May 2023 16:37:48 GMT"/>
					<outline text="addToolTip ($(&quot;#idUsernameInput&quot;), &quot;Enter the account of a Bluesky user here.&quot;);" isComment="true" created="Mon, 29 May 2023 16:37:48 GMT"/>
					<outline text="if (localPrefs.savedOpmltext !== undefined) { //restore" created="Mon, 29 May 2023 14:30:07 GMT">
						<outline text="viewOutline (localPrefs.savedOpmltext);" created="Mon, 29 May 2023 14:30:48 GMT"/>
						<outline text="}" created="Mon, 29 May 2023 14:30:27 GMT"/>
						</outline>
					<outline text="else {" created="Mon, 29 May 2023 14:31:09 GMT">
						<outline text="viewOutline (initialOpmltext);" created="Mon, 29 May 2023 14:30:48 GMT"/>
						<outline text="}" created="Mon, 29 May 2023 14:31:11 GMT"/>
						</outline>
					<outline text="" created="Mon, 29 May 2023 14:31:02 GMT"/>
					<outline text="testInsertResponse (); //testing"/>
					<outline text="" created="Mon, 16 Dec 2024 20:46:41 GMT"/>
					<outline text="self.setInterval (everySecond, 1000);"/>
					<outline text="hitCounter ();"/>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="client/index.html" isComment="true">
				<outline text="&lt;html&gt;">
					<outline text="&lt;head&gt;">
						<outline text="&lt;title&gt;ChatGPT Outliner Testing&lt;/title&gt;"/>
						<outline text="&lt;meta name=&quot;copyright&quot; content=&quot;Copyright 2013-2016, Small Picture, Inc.&quot;&gt;" isComment="true"/>
						<outline text="&lt;meta charset='utf-8'&gt; "/>
						<outline text="" created="Sun, 28 May 2023 16:59:57 GMT"/>
						<outline text="&lt;%basicIncludes2%&gt;"/>
						<outline text="" created="Sun, 28 May 2023 17:03:09 GMT"/>
						<outline text="&lt;script src=&quot;//s3.amazonaws.com/scripting.com/code/concord/testing/3.0.6/concord.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;link rel=&quot;stylesheet&quot; href=&quot;//s3.amazonaws.com/scripting.com/code/concord/testing/3.0.6/concordstyles.css&quot;/&gt;"/>
						<outline text="&lt;script src=&quot;//s3.amazonaws.com/fargo.io/code/shared/outliner.js&quot;&gt;&lt;/script&gt;" created="Thu, 08 May 2014 14:04:18 GMT" pgfnum="41269"/>
						<outline text="&lt;script src=&quot;//s3.amazonaws.com/scripting.com/code/opmlpackage/client/opml.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;link href=&quot;//s3.amazonaws.com/fargo.io/code/shared/outlinedialog.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text="&lt;script src=&quot;//s3.amazonaws.com/fargo.io/code/shared/outlinedialog.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;script src=&quot;//s3.amazonaws.com/fargo.io/code/keypress.js&quot; /&gt;&lt;/script&gt;"/>
						<outline text="" created="Sun, 28 May 2023 16:59:57 GMT"/>
						<outline text="&lt;link href=&quot;styles.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text="&lt;script src=&quot;code.js&quot;&gt;&lt;/script&gt;"/>
						<outline text=""/>
						<outline text="&lt;script src=&quot;http://static.smallpicture.com/bootstrap/js/jquery-1.9.1.min.js&quot;&gt;&lt;/script&gt;" isComment="true"/>
						<outline text="&lt;link href=&quot;http://static.smallpicture.com/bootstrap/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;" isComment="true"/>
						<outline text="&lt;script src=&quot;http://static.smallpicture.com/bootstrap/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;" isComment="true"/>
						<outline text="&lt;script src=&quot;http://fargo.io/code/strings.js&quot;&gt;&lt;/script&gt;" isComment="true"/>
						<outline text="&lt;script src=&quot;http://fargo.io/code/utils.js&quot;&gt;&lt;/script&gt;" isComment="true"/>
						<outline text="&lt;script src=&quot;http://fargo.io/code/concordDev.js&quot;&gt;&lt;/script&gt;" isComment="true"/>
						<outline text="&lt;script src=&quot;http://fargo.io/code/concordKeyboard.js&quot; /&gt;&lt;/script&gt;" isComment="true"/>
						<outline text="&lt;link href=&quot;http://fargo.io/code/ubuntuFont.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text="&lt;link href=&quot;http://fargo.io/code/vollkornFont.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;" isComment="true"/>
						<outline text="&lt;link href=&quot;http://fargo.io/code/ranchoFont.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;" isComment="true"/>
						<outline text="&lt;script src=&quot;http://happywordfriends.com/code/d3/lib/d3/d3.js&quot;&gt;&lt;/script&gt;" isComment="true"/>
						<outline text="&lt;script src=&quot;http://happywordfriends.com/code/d3/d3.layout.cloud.js&quot;&gt;&lt;/script&gt;" isComment="true"/>
						<outline text="&lt;link href='http://fonts.googleapis.com/css?family=Montserrat' rel='stylesheet' type='text/css'&gt;"/>
						<outline text=""/>
						<outline text="&lt;!-- Facebook metadata --&gt;" isComment="true">
							<outline text="&lt;meta property=&quot;og:url&quot; content=&quot;http://scripting.com/code/blueskyoutliner/&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:type&quot; content=&quot;website&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:title&quot; content=&quot;Bluesky People Browser&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:description&quot; content=&quot;An outliner for walking the structure of people and who they follow on Bluesky.&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:image&quot; content=&quot;http://scripting.com/images/2023/05/29/blueskyPeopleBrowser.png&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:site_name&quot; content=&quot;thesaurus.land&quot; /&gt;"/>
							</outline>
						<outline text="&lt;!-- Twitter metadata --&gt;" isComment="true">
							<outline text="&lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:site&quot; content=&quot;@davewiner&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:title&quot; content=&quot;Bluesky People Browser&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:description&quot; content=&quot;An outliner for walking the structure of people and who they follow on Bluesky.&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:image:src&quot; content=&quot;http://scripting.com/images/2023/05/29/blueskyPeopleBrowser.png&quot;&gt;"/>
							</outline>
						<outline text="&lt;/head&gt;"/>
						</outline>
					<outline text="&lt;body&gt;">
						<outline text="&lt;div class=&quot;divPageBody&quot;&gt;" created="Mon, 16 Dec 2024 13:47:12 GMT">
							<outline text="&lt;div class=&quot;divCommentsPrompt&quot;&gt;There may be a link to a place to get docs and comment here.&lt;/div&gt;" isComment="true" created="Mon, 29 May 2023 15:55:12 GMT"/>
							<outline text="&lt;div class=&quot;divCommentsPrompt&quot;&gt;Comments or questions? &lt;a href=&quot;https://github.com/scripting/blue.feedland/issues/12&quot;&gt;Post them here&lt;/a&gt;.&lt;/div&gt;" isComment="true" created="Mon, 29 May 2023 15:55:12 GMT"/>
							<outline text="&lt;div class=&quot;divWordPage&quot;&gt;">
								<outline text="&lt;div class=&quot;divVersionNumber&quot; id=&quot;idVersionNumber&quot;&gt;&lt;/div&gt;" isComment="true"/>
								<outline text="&lt;center&gt;">
									<outline text="&lt;div class=&quot;divHeadline&quot;&gt;">
										<outline text="AI OUTLINER"/>
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text=""/>
									<outline text="&lt;div class=&quot;divWordEntryBox&quot;&gt;">
										<outline text="&lt;input id=&quot;idUsernameInput&quot; type=&quot;text&quot; placeholder=&quot;Bluesky username goes here&quot;&gt;" isComment="true"/>
										<outline text="&lt;input id=&quot;idWordInput&quot; type=&quot;text&quot; name=&quot;url&quot; placeholder=&quot;Word to look up goes here&quot;&gt;" isComment="true"/>
										<outline text="&lt;button id=&quot;idLookupButton&quot; class=&quot;btn btnValidate btnPrimary&quot; onclick=&quot;goButtonClick ()&quot;&gt;">
											<outline text="Go" created="Mon, 16 Dec 2024 13:45:18 GMT"/>
											<outline text="&lt;i class=&quot;fa fa-arrow-up&quot;&gt;&lt;/i&gt; Look" isComment="true"/>
											<outline text="&lt;/button&gt;"/>
											</outline>
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text="&lt;div class=&quot;divErrorMessage&quot; id=&quot;idErrorMessage&quot;&gt;">
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text=""/>
									<outline text="&lt;div class=&quot;divInfoIcon&quot; rel=&quot;tooltip&quot; data-placement=&quot;right&quot; data-original-title=&quot;Have fun! Type a word in a headline, and expand by double-clicking on the triangle next to the word. The synonyms fill in below. Expand any of those to see their synonyms.&quot;&gt;&lt;i class=&quot;fa fa-info-circle&quot;&gt;&lt;/i&gt;&lt;/div&gt;" isComment="true"/>
									<outline text="&lt;div class=&quot;divExplanatoryText&quot;&gt;" isComment="true">
										<outline text="Have fun! Type a word in a headline, and expand by double-clicking on the triangle next to the word. The synonyms fill in below. "/>
										<outline text="Expand any of those to see their synonyms."/>
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text="&lt;/center&gt;"/>
									</outline>
								<outline text="&lt;div class=&quot;divOutlinerContainer&quot;&gt;">
									<outline text="&lt;div id=&quot;outliner&quot;&gt;">
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;center&gt;" isComment="true">
									<outline text="&lt;div class=&quot;divExplanatoryText&quot;&gt;">
										<outline text="Enter the identifier of a user in the box at the top of the page, and click the Look button. A list of the people they follow appears. Then you can double-click on any name to reveal who they follow and so on. This was an experiment, and I don't think it turned out that great because most people follow a lot of people for a list like this. But maybe new ideas will spring from this. 5/29/23 by DW" created="Mon, 29 May 2023 16:31:02 GMT"/>
										<outline text="" isComment="true" created="Mon, 29 May 2023 16:31:03 GMT"/>
										<outline text="Double-click on any name to see its synonyms. &lt;br&gt;" isComment="true"/>
										<outline text="Questions? Please visit the &lt;a href=&quot;http://thesaurus.smallpict.com/2014/07/09/welcomeToOurHumbleThesaurus.html&quot; target=&quot;_blank&quot;&gt;product blog&lt;/a&gt;. " isComment="true"/>
										<outline text="Thanks to &lt;a href=&quot;https://www.wordnik.com/about&quot;&gt;WordNik&lt;/a&gt; for the words server. :-)" isComment="true"/>
										<outline text="" isComment="true"/>
										<outline text="By &lt;a href=&quot;http://scripting.com/&quot; target=&quot;_blank&quot;&gt;Dave Winer&lt;/a&gt;. " isComment="true"/>
										<outline text="Here's a 2-minute &lt;a href=&quot;https://www.youtube.com/watch?v=ii_HOcj5JV8&quot; target=&quot;_blank&quot;&gt;video&lt;/a&gt; product intro. " isComment="true"/>
										<outline text="How to &lt;a href=&quot;http://fargo.io/docs/outlinerHowto.html&quot;&gt;use&lt;/a&gt; the outliner. " isComment="true"/>
										<outline text="The words come from the &lt;a href=&quot;http://developer.wordnik.com/docs.html&quot; target=&quot;_blank&quot;&gt;Wordnik API&lt;/a&gt;. It was super-easy to write for! " isComment="true"/>
										<outline text="The outliner is &lt;a href=&quot;https://github.com/scripting/concord&quot; target=&quot;_blank&quot;&gt;Concord&lt;/a&gt;, of course. :-)" isComment="true"/>
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text="&lt;/center&gt;"/>
									</outline>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;/div&gt;" created="Mon, 16 Dec 2024 13:47:12 GMT"/>
							</outline>
						<outline text="&lt;div class=&quot;divPageBackground&quot; id=&quot;idPageBackground&quot;&gt;">
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;script&gt;">
							<outline text="startup ();"/>
							<outline text="&lt;/script&gt;"/>
							</outline>
						<outline text="&lt;/body&gt;"/>
						</outline>
					<outline text="&lt;/html&gt;"/>
					</outline>
				</outline>
			</outline>
		<outline text="build script" created="Tue, 17 Dec 2024 23:26:11 GMT">
			<outline text="nodeEditorSuite.utilities.buildDaveGpt ()" created="Tue, 17 Dec 2024 23:26:15 GMT"/>
			</outline>
		</body>
	</opml>
